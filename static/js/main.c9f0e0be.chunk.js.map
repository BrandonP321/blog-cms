{"version":3,"sources":["logo.svg","utils/API.js","components/PostCreationComponents/CreatorToolBox/index.js","components/PostCreationComponents/SectionOptions/index.js","components/PostCreationComponents/BlogPostTitle/index.js","components/PostCreationComponents/BlogPostImage/index.js","components/PostCreationComponents/BlogPostSection/index.js","pages/PostCreator/index.js","components/BlogPostSection/index.js","components/BlogPostImage/index.js","components/BlogPostTitle/index.js","pages/BlogPost/index.js","components/loginComponents/LoginForm/index.js","components/loginComponents/SignUpForm/index.js","pages/Login/index.js","components/dashboardComponents/ProfileOverview/index.js","components/dashboardComponents/BlogPostBrief/index.js","pages/Dashboard/index.js","components/BlogPostBrief/index.js","pages/Home/index.js","components/Header/index.js","App.js","reportWebVitals.js","index.js"],"names":["APIENDPOINT","process","id","axios","get","userId","postObj","post","put","delete","userObj","token","img","CreatorToolBox","props","addSection","addImage","previewSite","publish","showSitePreview","className","onClick","SectionOptions","fileBtn","useRef","handleSectionMove","index","class","isForImage","current","click","ref","type","accept","onChange","e","selectedFile","target","files","reader","FileReader","onload","event","updateSectionImage","result","readAsDataURL","handleSectionDelete","BlogPostTitle","onBlur","handleTextInputChange","data-index","data-name","contentEditable","title","subtitle","BlogPostImage","src","url","alt","BlogPostSection","heading","text","PostCreator","useParams","postId","useState","isPublishing","setIsPublishing","components","setComponentsState","componentsRef","setComponents","data","setShowSitePreview","useEffect","API","then","postSections","document","body","style","overflowY","direction","newSections","moveAmount","section","splice","name","getAttribute","innerText","updatedArr","newSectionsArr","publishSite","a","Promise","all","map","sectionType","imgData","file","upload_preset","imgUploadRequest","newUrl","response","catch","err","console","log","alert","querySelectorAll","forEach","ele","display","BlogPost","sections","setSections","LoginForm","handleLoginAttempt","toggleForm","handleLoginTextInputChange","onSubmit","for","required","href","SignUpForm","handleSignUpAttempt","handleSignUpTextinputChange","signUpPasswordsMatch","Login","history","useHistory","isMakingNewAccount","showLoginForm","setShowLoginForm","setSignUpPasswordsMatch","email","password","passwordReEnter","signUpFormInput","setSignUpFormInput","loginFormInput","setLoginFormInput","preventDefault","headers","localStorage","setItem","push","status","value","jwt","ProfileOverview","BlogPostBrief","isExpanded","setIsExpanded","description","showPostUpdateModal","window","open","handlePostDeleteAttempt","Dashboard","myPosts","setMyPosts","postsToDisplay","setPostsToDisplay","showModal","setShowModal","showPostDeleteModal","setShowPostDeleteModal","postToBeDeleted","setPostToBeDeleted","modalPostId","setModalPostId","modalInput","setModalInput","userIsMakingNewPost","setUserIsMakingNewPost","currentBlogsListPage","setCurrentBlogsListPage","modalSaveBtnCallback","useCallback","creator","_id","handleModalToggle","posts","length","endPostIndex","postsArr","slice","hideDeletePostModal","handleModalInputChange","disabled","Modal","show","onHide","Header","closeButton","Title","Body","placeholder","Footer","Button","variant","briefEle","descEle","Date","createdAt","toLocaleDateString","height","heightDiff","clientHeight","Home","isLoading","setIsLoading","allPosts","setAllPosts","sortedPosts","setSortedPosts","displayPosts","setDisplayedPosts","postsDisplayedPage","setPostsDisplayedPage","handleSort","sort","newSortedPosts","b","DropdownButton","Dropdown","Item","as","location","useLocation","loggedInUser","setLoggedInUser","showPopUp","setShowPopUp","getItem","user","to","removeItem","pathname","go","App","basename","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c9f0e0be.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import axios from 'axios'\r\n\r\nconst APIENDPOINT = process.env.REACT_APP_APIENDPOINT\r\n\r\nexport default {\r\n    getBlogPost: function(id) {\r\n        return axios.get(`${APIENDPOINT}/api/post/` + id)\r\n    },\r\n    getAllBlogPosts: function() {\r\n        return axios.get(`${APIENDPOINT}/api/post/all`)\r\n    },\r\n    getPostsByUser: function(userId) {\r\n        return axios.get(`${APIENDPOINT}/api/user/` + userId + '/post/all')\r\n    },\r\n    createBlogPost: function(postObj) {\r\n        return axios.post(`${APIENDPOINT}/api/post/create`, postObj)\r\n    },\r\n    updateBlogPost: function(id, postObj) {\r\n        return axios.put(`${APIENDPOINT}/api/post/update/` + id, postObj)\r\n    },\r\n    deleteBlogPost: function(id) {\r\n        return axios.delete(`${APIENDPOINT}/api/post/delete/` + id)\r\n    },\r\n    login: function(userObj) {\r\n        return axios.post(`${APIENDPOINT}/api/user/login`, userObj)\r\n    },\r\n    createNewAccount: function(userObj) {\r\n        return axios.post(`${APIENDPOINT}/api/user/create`, userObj)\r\n    },\r\n    validateToken: function(token) {\r\n        return axios.get(`${APIENDPOINT}/api/auth/token`, { 'headers': { 'auth-token': `${token}`}})\r\n    },\r\n    updateCloudinaryImage: function(img) {\r\n        return axios.post('https://api.cloudinary.com/v1_1/brandonp321/image/upload', img)\r\n    }\r\n}","import React from 'react'\r\nimport Draggable from 'react-draggable'\r\nimport './index.css'\r\n\r\nexport default function CreatorToolBox(props) {\r\n    const { addSection, addImage, previewSite, publish, showSitePreview } = props\r\n\r\n    return (\r\n        <Draggable>\r\n            <div className='post-creator-tools'>\r\n                <div className='tools-header'>\r\n                    <p>Creation Tools</p>\r\n                </div>\r\n                <div className='tools'>\r\n                    <button onClick={addSection}>Add Section</button>\r\n                    <button onClick={addImage}>Add Image</button>\r\n                    <button className={showSitePreview ? 'active' : ''} onClick={previewSite}>Priview Post</button>\r\n                    <button className='bottom-button' onClick={publish}>Publish</button>\r\n                </div>\r\n            </div>\r\n        </Draggable>\r\n    )\r\n}\r\n","import React, { useRef } from 'react'\r\nimport './index.css'\r\n\r\nexport default function SectionOptions(props) {\r\n    const fileBtn = useRef()\r\n\r\n    const handleImageChange = (e) => {\r\n        // get location of image on user's computer\r\n        const selectedFile = e.target.files[0]\r\n        const reader = new FileReader();\r\n\r\n        reader.onload = (event) => props.updateSectionImage(event.target.result, props.index)\r\n        \r\n        reader.readAsDataURL(selectedFile)\r\n    }\r\n\r\n    return (\r\n        <div className='section-options-container'>\r\n            <div className='section-arrows'>\r\n                <div className='up-arrow' onClick={() => props.handleSectionMove(props.index, 'up')}>\r\n                    <i class=\"fas fa-sort-up\"></i>\r\n                </div>\r\n                <div className='down-arrow' onClick={() => props.handleSectionMove(props.index, 'down')}>\r\n                    <i class=\"fas fa-sort-down\"></i>\r\n                </div>\r\n            </div>\r\n            {props.isForImage ?\r\n                <div className='section-image-change-wrapper' onClick={() => fileBtn.current.click()}>\r\n                    <i className='far fa-image'></i>\r\n                    <input ref={fileBtn} type='file' accept='.jpg,.png,.jpeg' onChange={handleImageChange} />\r\n                </div> :\r\n                ''\r\n            }\r\n            <div className='section-delete-wrapper' onClick={() => props.handleSectionDelete(props.index)}>\r\n                <i class=\"fas fa-trash-alt\"></i>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport SectionOptions from '../SectionOptions'\r\nimport './index.css'\r\n\r\nexport default function BlogPostTitle(props) {\r\n    return (\r\n        <div className='post-creator-section'>\r\n            <h1 \r\n                className='post-title' \r\n                onBlur={props.handleTextInputChange}\r\n                data-index={props.index}\r\n                data-name='title'\r\n                contentEditable\r\n            >\r\n                {props.title}\r\n            </h1>\r\n            <h3 \r\n                className='post-sub-title' \r\n                onBlur={props.handleTextInputChange}\r\n                data-index={props.index}\r\n                data-name='subtitle'\r\n                contentEditable\r\n            >\r\n                {props.subtitle}\r\n            </h3>           \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport SectionOptions from '../SectionOptions'\r\nimport './index.css'\r\n\r\nexport default function BlogPostImage(props) {\r\n    return (\r\n        <div className='post-creator-section'>\r\n            <SectionOptions \r\n                isForImage={true}\r\n                index={props.index} \r\n                handleSectionMove={props.handleSectionMove} \r\n                handleSectionDelete={props.handleSectionDelete}\r\n                updateSectionImage={props.updateSectionImage}\r\n            />\r\n            <img className='post-image' src={props.url || 'https://via.placeholder.com/1920x1080'} alt={props.alt} />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport SectionOptions from '../../PostCreationComponents/SectionOptions'\r\nimport './index.css'\r\n\r\nexport default function BlogPostSection(props) {\r\n    return (\r\n        <div className='post-creator-section'>\r\n            <SectionOptions\r\n                index={props.index}\r\n                handleSectionMove={props.handleSectionMove}\r\n                handleSectionDelete={props.handleSectionDelete}\r\n            />\r\n            <h2\r\n                onBlur={props.handleTextInputChange}\r\n                data-index={props.index}\r\n                data-name='heading'\r\n                contentEditable\r\n            >{props.heading}</h2>\r\n            <p\r\n                onBlur={props.handleTextInputChange}\r\n                data-index={props.index}\r\n                data-name='text'\r\n                contentEditable\r\n            >{props.text}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport API from '../../utils/API'\r\nimport CreatorToolBox from '../../components/PostCreationComponents/CreatorToolBox'\r\nimport BlogPostTitle from '../../components/PostCreationComponents/BlogPostTitle'\r\nimport BlogPostImage from '../../components/PostCreationComponents/BlogPostImage'\r\nimport BlogPostSection from '../../components/PostCreationComponents/BlogPostSection'\r\nimport './index.css'\r\n\r\nexport default function PostCreator(props) {\r\n    const { userId, postId } = useParams();\r\n\r\n    const [isPublishing, setIsPublishing] = useState(false)\r\n\r\n    const [components, setComponentsState] = useState([])\r\n    const componentsRef = useRef([])\r\n    const setComponents = data => {\r\n        componentsRef.current = data\r\n        setComponentsState(data)\r\n    }\r\n\r\n    const [showSitePreview, setShowSitePreview] = useState(false)\r\n\r\n    useEffect(() => {\r\n        // using post id in url, make api call to get data on blog post\r\n        API.getBlogPost(postId).then(post => {\r\n            setComponents(post.data.postSections)\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        // if post is publishing, hide body overflow\r\n        if (isPublishing) {\r\n            document.body.style.overflowY = 'hidden'\r\n        } else {\r\n            document.body.style.overflowY = 'auto'\r\n        }\r\n    }, [isPublishing])\r\n\r\n    const addSection = () => {\r\n        // add object to state with properties for a section with a heading and text\r\n        const sectionObj = {\r\n            sectionType: 'subSection',\r\n            heading: 'Heading',\r\n            text: 'This is the body text for this section'\r\n        }\r\n\r\n        setComponents([...componentsRef.current, sectionObj])\r\n    }\r\n\r\n    const addImage = () => {\r\n        // add object to state with info for image section\r\n        const imgObj = {\r\n            sectionType: 'image',\r\n            url: '',\r\n            alt: '',\r\n        }\r\n\r\n        setComponents([...componentsRef.current, imgObj])\r\n    }\r\n\r\n    const handleSectionMove = (index, direction) => {\r\n        const newSections = [...componentsRef.current]\r\n\r\n        // set integer value to direction to indicate index increase/decrease in state array\r\n        const moveAmount = direction === 'up' ? -1 : 1\r\n        // remove section from array of sections\r\n        const section = newSections.splice(index, 1)[0]\r\n        // add section back in at new index locations\r\n        newSections.splice(index + moveAmount, 0, section)\r\n        // set value in state and ref hooks to new array of sections\r\n        setComponents(newSections)\r\n    }\r\n\r\n    const handleSectionDelete = index => {\r\n        // make copy of current state and remove section\r\n        const newSections = [...componentsRef.current]\r\n        newSections.splice(index, 1)\r\n\r\n        // update hooks with new array\r\n        setComponents(newSections)\r\n    }\r\n\r\n    const handleTextInputChange = (event) => {\r\n        // get value and name of input field and index of section in state\r\n        const name = event.target.getAttribute('data-name')\r\n        const text = event.target.innerText\r\n        const index = event.target.getAttribute('data-index')\r\n\r\n        // create new array to with updated value of input field\r\n        const updatedArr = [...componentsRef.current]\r\n        updatedArr[index][name] = text\r\n\r\n        // only update ref since value doesn't change rendered components\r\n        componentsRef.current = updatedArr\r\n    }\r\n\r\n    const updateSectionImage = (img, index) => {\r\n        // update img of section at given index\r\n        const newSectionsArr = [...componentsRef.current]\r\n        newSectionsArr[index].url = img\r\n\r\n        setComponents(newSectionsArr)\r\n    }\r\n\r\n    const toggleSitePreview = () => {\r\n        // if site preview is currently false, hide creator elements to show preview\r\n        if (!showSitePreview) {\r\n            document.querySelectorAll('.section-options-container').forEach(ele => ele.style.display = 'none')\r\n        } else {\r\n            // else show all creator elements\r\n            document.querySelectorAll('.section-options-container').forEach(ele => ele.style.display = 'block')\r\n        }\r\n\r\n        // update state to show/hide site preview\r\n        setShowSitePreview(!showSitePreview)\r\n    }\r\n\r\n    const publishSite = async () => {\r\n        // update state\r\n        setIsPublishing(true)\r\n\r\n        // for each section that contains an image, upload the image to cloudinary and replace temp url with returned url\r\n        Promise.all(componentsRef.current.map(async (section, index) => {\r\n            if (section.sectionType === 'image') {\r\n                const imgData = {\r\n                    file: section.url,\r\n                    upload_preset: 'oatstti0'\r\n                }\r\n\r\n                const imgUploadRequest = await API.updateCloudinaryImage(imgData)\r\n\r\n                const newUrl = imgUploadRequest.data.url\r\n\r\n                return { ...section, url: newUrl }\r\n            } else {\r\n                return section\r\n            }\r\n        })).then((response) => {\r\n            // update state\r\n            setIsPublishing(false)\r\n\r\n            // returned response is array of sections with new cloudinary image urls, send to server\r\n            API.updateBlogPost(postId, { postSections: response })\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n            alert('An error has occurred')\r\n            setIsPublishing(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={`loading-screen-overlay${isPublishing ? ' active' : ''}`}>\r\n                <i className='fad fa-spinner-third'></i>\r\n                <h2>Publishing...</h2>\r\n            </div>\r\n            <CreatorToolBox\r\n                addSection={addSection}\r\n                addImage={addImage}\r\n                previewSite={toggleSitePreview}\r\n                publish={publishSite}\r\n                showSitePreview={showSitePreview}\r\n            />\r\n            <div className='content-responsive'>\r\n                {components.map((section, index) => {\r\n                    switch (section.sectionType) {\r\n                        case 'title':\r\n                            return <div className='post-section-wrapper'>\r\n                                <BlogPostTitle\r\n                                    title={section.title}\r\n                                    subtitle={section.subtitle}\r\n                                    index={index}\r\n                                    handleTextInputChange={handleTextInputChange}\r\n                                    handleSectionMove={handleSectionMove}\r\n                                    handleSectionDelete={handleSectionDelete}\r\n                                /></div>\r\n                        case 'subSection':\r\n                            return <div className='post-section-wrapper'>\r\n                                <BlogPostSection\r\n                                    heading={section.heading}\r\n                                    text={section.text}\r\n                                    index={index}\r\n                                    handleTextInputChange={handleTextInputChange}\r\n                                    handleSectionMove={handleSectionMove}\r\n                                    handleSectionDelete={handleSectionDelete}\r\n                                /></div>\r\n                        case 'image':\r\n                            return <div className='post-section-wrapper'>\r\n                                <BlogPostImage\r\n                                    url={section.url}\r\n                                    alt={section.alt}\r\n                                    index={index}\r\n                                    handleSectionMove={handleSectionMove}\r\n                                    handleSectionDelete={handleSectionDelete}\r\n                                    updateSectionImage={updateSectionImage}\r\n                                /></div>\r\n                    }\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './index.css'\r\n\r\nexport default function BlogPostSection(props) {\r\n    return (\r\n        <div className='post-section'>\r\n            <h2>{props.heading}</h2>\r\n            <p>{props.text}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './index.css'\r\n\r\nexport default function BlogPostImage(props) {\r\n    return (\r\n        <img className='post-image' src={props.url} alt={props.alt} />\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function BlogPostTitle(props) {\r\n    return (\r\n        <div>\r\n            <h1 className='post-title'>{props.title}</h1>\r\n            <h3 className='post-sub-title'>{props.subtitle}</h3>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport BlogPostSection from '../../components/BlogPostSection'\r\nimport BlogPostImage from '../../components/BlogPostImage'\r\nimport BlogPostTitle from '../../components/BlogPostTitle'\r\nimport './index.css'\r\nimport { useParams } from 'react-router-dom'\r\nimport API from '../../utils/API'\r\n\r\nexport default function BlogPost() {\r\n    const { id } = useParams();\r\n\r\n    const [sections, setSections] = useState([])\r\n\r\n    useEffect(() => {\r\n        // get blog post data from server\r\n        API.getBlogPost(id).then(response => {\r\n            setSections(response.data.postSections)\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <div className='content-responsive'>\r\n                {sections.map((section, index) => {\r\n                    switch (section.sectionType) {\r\n                        case 'title':\r\n                            return <div className='post-section-wrapper'>\r\n                                <BlogPostTitle\r\n                                    title={section.title}\r\n                                    subtitle={section.subtitle}\r\n                                    index={index}\r\n                                /></div>\r\n                        case 'subSection':\r\n                            return <div className='post-section-wrapper'>\r\n                                <BlogPostSection\r\n                                    heading={section.heading}\r\n                                    text={section.text}\r\n                                    index={index}\r\n                                /></div>\r\n                        case 'image':\r\n                            return <div className='post-section-wrapper'>\r\n                                <BlogPostImage\r\n                                    url={section.url}\r\n                                    alt={section.alt}\r\n                                    index={index}\r\n                                /></div>\r\n                    }\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './index.css'\r\n\r\nexport default function LoginForm(props) {\r\n    const { handleLoginAttempt, toggleForm, handleLoginTextInputChange } = props\r\n\r\n    return (\r\n        <div className='login-form-container'>\r\n            <h1>Login</h1>\r\n\r\n            <form onSubmit={handleLoginAttempt}>\r\n                <div class=\"form-group\">\r\n                    <label for=\"login-email-input\">Email address</label>\r\n                    <input type=\"email\" class=\"form-control\" id=\"login-email-input\" name='email' onChange={handleLoginTextInputChange} required />\r\n                    {/* <small id=\"emailHelp\" class=\"form-text text-muted\">We'll never share your email with anyone else.</small> */}\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"login-password-input\">Password</label>\r\n                    <input type=\"password\" class=\"form-control\" id=\"login-password-input\" name='password' onChange={handleLoginTextInputChange} required />\r\n                    {/* <small id=\"emailHelp\" class=\"form-text text-muted\">We'll never share your email with anyone else.</small> */}\r\n                </div>\r\n                <button type=\"submit\" class=\"btn btn-primary\">Login</button>\r\n            </form>\r\n\r\n            <p>Don't have an account? <a href='#' onClick={toggleForm}>Sign Up</a></p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './index.css'\r\n\r\nexport default function SignUpForm(props) {\r\n    const { toggleForm, \r\n        handleSignUpAttempt, \r\n        handleSignUpTextinputChange,\r\n        signUpPasswordsMatch\r\n    } = props\r\n\r\n    return (\r\n        <div className='signup-form-container'>\r\n            <h1>Sign Up</h1>\r\n\r\n            <form onSubmit={handleSignUpAttempt}>\r\n                <div className=\"form-group\">\r\n                    <label for=\"signup-name-input\">Name</label>\r\n                    <input type=\"text\" className=\"form-control\" id=\"signup-name-input\" name='name' onChange={handleSignUpTextinputChange} required/>\r\n                    {/* <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small> */}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label for=\"signup-email-input\">Email address</label>\r\n                    <input type=\"email\" className=\"form-control\" id=\"signup-email-input\" name='email' onChange={handleSignUpTextinputChange} required/>\r\n                    {/* <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small> */}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label for=\"signup-password-input\">Password</label>\r\n                    <input type=\"password\" className=\"form-control\" id=\"signup-password-input\" name='password' onChange={handleSignUpTextinputChange} required/>\r\n                    {/* <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small> */}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label for=\"signup-password-second-input\">Re-Enter Password</label>\r\n                    <input type=\"password\" className=\"form-control\" id=\"signup-password-second-input\" name='passwordReEnter' onChange={handleSignUpTextinputChange} required/>\r\n                    <small id=\"emailHelp\" className=\"form-text text-muted text-danger\">{signUpPasswordsMatch ? '' : 'Passwords must match'}</small>\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary\">Sign Up</button>\r\n            </form>\r\n\r\n            <p>Already have an account? <a href='#' onClick={toggleForm}>Login</a></p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport LoginForm from '../../components/loginComponents/LoginForm'\r\nimport SignUpForm from '../../components/loginComponents/SignUpForm'\r\nimport API from '../../utils/API'\r\nimport './index.css'\r\n\r\nexport default function Login(props) {\r\n    let history = useHistory();\r\n\r\n    const { isMakingNewAccount } = props\r\n\r\n    // boolean to show login or sign up form\r\n    const [showLoginForm, setShowLoginForm] = useState(!isMakingNewAccount)\r\n\r\n    const [signUpPasswordsMatch, setSignUpPasswordsMatch] = useState(true)\r\n\r\n    const [signUpFormInput, setSignUpFormInput] = useState({\r\n        name: '',\r\n        email: '',\r\n        password: '',\r\n        passwordReEnter: '',\r\n    })\r\n\r\n    const [loginFormInput, setLoginFormInput] = useState({\r\n        email: '',\r\n        password: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        // when sign up form is updated, check if passwords match\r\n        const { password, passwordReEnter } = signUpFormInput;\r\n        setSignUpPasswordsMatch(password === passwordReEnter)\r\n    }, [signUpFormInput])\r\n\r\n    const handleLoginTextInputChange = event => {\r\n        // get name and value of input changed\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n\r\n        // update state with new value\r\n        setLoginFormInput({ ...loginFormInput, [name]: value})\r\n    }\r\n\r\n    const handleSignUpTextinputChange = event => {\r\n        // get name and value of input changed\r\n        const name = event.target.name\r\n        const value = event.target.value\r\n\r\n        // update state with new value\r\n        setSignUpFormInput({ ...signUpFormInput, [name]: value })\r\n    }\r\n\r\n    const toggleForm = () => {\r\n        // toggle boolean in state\r\n        setShowLoginForm(!showLoginForm)\r\n    }\r\n\r\n    const handleLoginAttempt = (event) => {\r\n        event.preventDefault();\r\n\r\n        // send request to server to attempt login\r\n        API.login(loginFormInput)\r\n            .then(response => {\r\n                const token = response.headers['auth-token']\r\n                const userId = response.data\r\n                // store token in local storage\r\n                localStorage.setItem('token', token)\r\n\r\n                // redirect to user's dashboard\r\n                history.push('/dashboard/user/' + userId)\r\n            })\r\n            .catch(err => {\r\n                switch(err.response.status) {\r\n                    case 401:\r\n                        // email or password were incorrect\r\n                        break;\r\n                }\r\n            })\r\n    }\r\n\r\n    const handleSignUpAttempt = (event) => {\r\n        event.preventDefault();\r\n\r\n        const { name, email, password } = signUpFormInput\r\n\r\n        const userObj = {\r\n            name: name,\r\n            email: email,\r\n            password: password\r\n        }\r\n\r\n        // send request to server to create account\r\n        API.createNewAccount(userObj)\r\n            .then(response => {\r\n                // if successfully signed up, store jwt and redirect to dashboard\r\n                const jwt = response.headers['auth-token']\r\n                localStorage.setItem('token', jwt)\r\n\r\n                history.push(`/dashboard/user/${response.data}`)\r\n            })\r\n            .catch(err => {\r\n                switch(err.response.status) {\r\n                    case 409:\r\n                        // user with same email address alreay exists\r\n                        break;\r\n                }\r\n            })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {showLoginForm ? \r\n                <LoginForm \r\n                    toggleForm={toggleForm}\r\n                    handleLoginAttempt={handleLoginAttempt}\r\n                    handleLoginTextInputChange={handleLoginTextInputChange}\r\n                /> :\r\n                <SignUpForm \r\n                    toggleForm={toggleForm}\r\n                    signUpPasswordsMatch={signUpPasswordsMatch}\r\n                    handleSignUpAttempt={handleSignUpAttempt}\r\n                    handleSignUpTextinputChange={handleSignUpTextinputChange}\r\n                />\r\n            }  \r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './index.css'\r\n\r\nexport default function ProfileOverview() {\r\n    return (\r\n        <div className='profile-container'>\r\n            <h2>My Profile</h2>\r\n            <div className='profile-flex-wrapper'>\r\n                <div className='profile-info-group name'>\r\n                    <p className='info-heading'><strong>Name</strong></p>\r\n                    <p className='info'>Brandon</p>\r\n                </div>\r\n                <div className='profile-info-group email'>\r\n                    <p className='info-heading'><strong>Email</strong></p>\r\n                    <p className='info'>email@email.com</p>\r\n                </div>\r\n                <div className='profile-info-group bio'>\r\n                    <p className='info-heading'><strong>Bio</strong></p>\r\n                    <p className='info'>This is my bio</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './index.css'\r\n\r\nexport default function BlogPostBrief(props) {\r\n    const [isExpanded, setIsExpanded] = useState(false)\r\n\r\n    return (\r\n        <div className={isExpanded ? 'my-post-brief expanded' : 'my-post-brief'}>\r\n            <div className='my-post-details'>\r\n                <Link className='my-post-title' href={`/post/${props.id}`} target='_blank'><strong>{props.title}</strong></Link>\r\n                <p className='my-post-description'>{props.description}</p>\r\n            </div>\r\n            <div className='my-post-options'>\r\n                <button className='btn btn-primary' onClick={() => props.showPostUpdateModal(props.title, props.description, props.id)}>Details</button>\r\n                <button className='btn btn-primary' onClick={() => window.open('/user/' + props.userId + '/post/update/' + props.id)}>Edit</button>\r\n                <button className='btn btn-danger' onClick={() => props.handlePostDeleteAttempt(props.id)}>Delete</button>\r\n                <a href='#' onClick={() => setIsExpanded(!isExpanded)}>{isExpanded ? 'Read Less' : 'Read More'}</a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect, useCallback } from 'react'\r\nimport { Button, Modal } from 'react-bootstrap'\r\nimport ProfileOverview from '../../components/dashboardComponents/ProfileOverview'\r\nimport { useParams } from 'react-router-dom'\r\nimport BlogPostBrief from '../../components/dashboardComponents/BlogPostBrief'\r\nimport API from '../../utils/API'\r\nimport './index.css'\r\n\r\nexport default function Dashboard() {\r\n    const { userId } = useParams()\r\n\r\n    const [myPosts, setMyPosts] = useState([])\r\n    const [postsToDisplay, setPostsToDisplay] = useState([])\r\n    const [showModal, setShowModal] = useState(false)\r\n    const [showPostDeleteModal, setShowPostDeleteModal] = useState(false)\r\n    const [postToBeDeleted, setPostToBeDeleted] = useState(null)\r\n    const [modalPostId, setModalPostId] = useState(null)\r\n    const [modalInput, setModalInput] = useState({\r\n        title: '',\r\n        description: ''\r\n    })\r\n    const [userIsMakingNewPost, setUserIsMakingNewPost] = useState(true)\r\n    // current page of list of blog posts starts counting at 0\r\n    const [currentBlogsListPage, setCurrentBlogsListPage] = useState(0)\r\n\r\n    const modalSaveBtnCallback = useCallback(() => {\r\n        if (userIsMakingNewPost) {\r\n            // if user is making a new post, have save btn make an api request to add post to db\r\n            const postObj = {\r\n                title: modalInput.title,\r\n                description: modalInput.description,\r\n                creator: userId,\r\n                postSections: [\r\n                    {\r\n                        sectionType: 'title',\r\n                        title: 'Blog Post Title',\r\n                        subtitle: 'Insert subtitle here'\r\n                    }\r\n                ]\r\n            }\r\n\r\n            // send post object to server\r\n            API.createBlogPost(postObj).then(post => {\r\n                console.log(post.data)\r\n                // open blog editor in new tab\r\n                window.open(`/user/${userId}/post/update/${post.data._id}`)\r\n\r\n                handleModalToggle()\r\n            })\r\n        } else {\r\n\r\n            // else make request to update existing server\r\n            API.updateBlogPost(modalPostId, modalInput).then(() => {\r\n                handleModalToggle()\r\n            })\r\n        }\r\n    }, [userIsMakingNewPost, modalInput, modalPostId])\r\n\r\n    useEffect(() => {\r\n        // make call to server to get all posts by the user\r\n        API.getPostsByUser(userId)\r\n            .then(({ data: posts }) => {\r\n                console.log(posts)\r\n                // add posts to state\r\n                setMyPosts(posts)\r\n            })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        // when my posts are loaded in, select 5 posts based on currently display page to display to user\r\n        if (myPosts.length > 0) {\r\n            const endPostIndex = currentBlogsListPage * 5 + 4 < myPosts.length ? currentBlogsListPage * 5 + 4 : myPosts.length\r\n            console.log(currentBlogsListPage * 5 + 4, myPosts.length)\r\n            const postsArr = myPosts.slice(currentBlogsListPage * 5, endPostIndex + 1)\r\n            setPostsToDisplay(postsArr)\r\n        }\r\n    }, [myPosts, currentBlogsListPage])\r\n\r\n    const handleModalToggle = () => {\r\n        setShowModal(!showModal)\r\n    }\r\n\r\n    const hideDeletePostModal = () => {\r\n        setShowPostDeleteModal(false)\r\n\r\n        setPostToBeDeleted(null)\r\n    }\r\n\r\n    const showNewPostModal = () => {\r\n        // update values to be shown in modal\r\n        setUserIsMakingNewPost(true)\r\n        setModalInput({ title: '', description: '' })\r\n\r\n        handleModalToggle()\r\n    }\r\n\r\n    const showPostUpdateModal = (title, description, postId) => {\r\n        // update values to be shown in modal\r\n        setUserIsMakingNewPost(false)\r\n        setModalInput({ title: title, description: description })\r\n        setModalPostId(postId)\r\n\r\n        setShowModal(!showModal)\r\n    }\r\n\r\n    const handleModalInputChange = (event) => {\r\n        // get name and value of input changed\r\n        const name = event.target.name\r\n        const value = event.target.value\r\n\r\n        // update state with new value\r\n        setModalInput({ ...modalInput, [name]: value })\r\n    }\r\n\r\n    const handlePostDeleteAttempt = postId => {\r\n        // update state with id of post to be deleted\r\n        setPostToBeDeleted(postId)\r\n\r\n        // pop up modal to confirm user wants to delete blog post\r\n        setShowPostDeleteModal(true)\r\n    }\r\n\r\n    const handlePostDelete = () => {\r\n        console.log(postToBeDeleted)\r\n        API.deleteBlogPost(postToBeDeleted).then(() => {\r\n            hideDeletePostModal()\r\n        })\r\n    }\r\n\r\n    const handlePrevBtnClick = () => {\r\n        // decrease current page by 1\r\n        setCurrentBlogsListPage(currentBlogsListPage - 1)\r\n    }\r\n\r\n    const handleNextBtnClick = () => {\r\n        // increase current page by 1\r\n        setCurrentBlogsListPage(currentBlogsListPage + 1)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='dashboard-wrapper'>\r\n                <h1 className='text-white'>My Dashboard</h1>\r\n                <div className='dashboard-content-wrapper'>\r\n                    <ProfileOverview />\r\n                    <div className='my-posts-container'>\r\n                        <h2 className='text-white'>My Posts</h2>\r\n                        <div className='search-bar'>\r\n                            <div className='flex-items-right'>\r\n                                <button className='new-post-btn btn btn-primary' onClick={showNewPostModal}>Create New Post</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className='posts'>\r\n                            {postsToDisplay.map(post => {\r\n                                return <BlogPostBrief\r\n                                    title={post.title}\r\n                                    description={post.description}\r\n                                    id={post._id}\r\n                                    userId={userId}\r\n                                    showPostUpdateModal={showPostUpdateModal}\r\n                                    handlePostDeleteAttempt={handlePostDeleteAttempt}\r\n                                />\r\n                            })}\r\n                        </div>\r\n                        <div className='my-posts-page-btns'>\r\n                            {currentBlogsListPage !== 0 ?\r\n                                <button className='btn btn-light' onClick={handlePrevBtnClick}>Previous</button> :\r\n                                <button className='btn btn-light' disabled>Previous</button>\r\n                            }\r\n                            {currentBlogsListPage * 5 + 4 < myPosts.length ?\r\n                                <button className='btn btn-light' onClick={handleNextBtnClick}>Next</button> :\r\n                                <button className='btn btn-light' disabled>Next</button>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <Modal show={showModal} onHide={handleModalToggle}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Blog Post Details</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <div className='form-group'>\r\n                        <label for='blog-title-input'>Title</label>\r\n                        <input id='blog-title-input' className='modal-post-title form-control' placeholder='Blog Post Title' name='title' value={modalInput.title} onChange={handleModalInputChange} />\r\n                    </div>\r\n                    <div className='form-group'>\r\n                        <label for='blog-desc-input'>Description</label>\r\n                        <textarea id='blog-desc-input' className='modal-post-description form-control' placeholder='Description' name='description' value={modalInput.description} onChange={handleModalInputChange}>\r\n                        </textarea>\r\n                    </div>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleModalToggle}>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={modalSaveBtnCallback}>\r\n                        {userIsMakingNewPost ? 'Create Post' : 'Save Changes'}\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n            <Modal show={showPostDeleteModal} onHide={hideDeletePostModal}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Blog Post Details</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    Are you sure you want to delete this blog post?\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"danger\" onClick={handlePostDelete}>\r\n                        Delete\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={hideDeletePostModal}>\r\n                        Cancel\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState, useRef } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport './index.css'\r\n\r\nexport default function BlogPostBrief(props) {\r\n    let history = useHistory();\r\n\r\n    const [isExpanded, setIsExpanded] = useState(false)\r\n\r\n    const briefEle = useRef()\r\n    const descEle = useRef()\r\n\r\n    const handleExpandToggle = () => {\r\n        if (isExpanded) {\r\n            // if div is expanded, set height back to 110px and update state\r\n            briefEle.current.style.height = '110px'\r\n        } else {\r\n            // if div not expanded, get height of description ele to find amount of ele hidden\r\n            const descHeight = descEle.current.clientHeight\r\n            const heightDiff = descHeight - 58\r\n\r\n            if (heightDiff > 0) {\r\n                // increase height of brief div by height diff\r\n                briefEle.current.style.height = `${briefEle.current.clientHeight + heightDiff}px`\r\n            }\r\n        }\r\n\r\n        // toggle isExpanded value\r\n        setIsExpanded(!isExpanded)\r\n    }\r\n\r\n    return (\r\n        <div ref={briefEle} className='home-post-brief'>\r\n            <h3 onClick={() => history.push('/post/' + props.id)}>{props.title} <span className='creation-date'></span></h3>\r\n            <p className='creator'>{props.creator} {new Date(props.createdAt).toLocaleDateString()}</p>\r\n            <p ref={descEle} className='description'>{props.description}</p>\r\n            <a href='#' onClick={handleExpandToggle}>{isExpanded ? 'Less' : \"More\"}</a>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect, useCallback } from 'react'\r\nimport { Dropdown, DropdownButton } from 'react-bootstrap'\r\nimport BlogPostBrief from '../../components/BlogPostBrief'\r\nimport API from '../../utils/API'\r\nimport './index.css'\r\n\r\nexport default function Home() {\r\n    const [isLoading, setIsLoading] = useState(true)\r\n\r\n    const [allPosts, setAllPosts] = useState([])\r\n    const [sortedPosts, setSortedPosts] = useState([])\r\n    const [displayPosts, setDisplayedPosts] = useState([])\r\n    const [postsDisplayedPage, setPostsDisplayedPage] = useState(0)\r\n\r\n    useEffect(() => {\r\n        // on load, get all blog posts from server\r\n        API.getAllBlogPosts()\r\n            .then(({ data: posts }) => {\r\n                // update state with array of posts\r\n                setAllPosts(posts)\r\n                // sorted posts state can also be set now since no sort option is set\r\n                setSortedPosts(posts)\r\n\r\n                setIsLoading(false)\r\n            })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        // when all posts state is updated, update posts to be displayed\r\n        if (sortedPosts.length > 0) {\r\n            const endPostIndex = postsDisplayedPage * 5 + 4 < sortedPosts.length ? postsDisplayedPage * 5 + 4 : sortedPosts.length\r\n            const postsArr = sortedPosts.slice(postsDisplayedPage * 5, endPostIndex + 1)\r\n            setDisplayedPosts(postsArr)\r\n        }\r\n    }, [sortedPosts, postsDisplayedPage])\r\n\r\n    const handleSort = useCallback((sort) => {\r\n        console.log('sorting by ' + sort)\r\n        // based on sort argument, sort the blog posts\r\n        switch (sort) {\r\n            case 'recent':\r\n                var newSortedPosts = [...allPosts].sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))\r\n                setSortedPosts(newSortedPosts)\r\n                break;\r\n            case 'oldest':\r\n                var newSortedPosts = [...allPosts].sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt))\r\n                setSortedPosts(newSortedPosts)\r\n                break;\r\n            case 'none':\r\n                // if no sort, set sorted posts state back to original array of posts\r\n                setSortedPosts([...allPosts])\r\n                break;\r\n        }\r\n\r\n        // set page back to 0\r\n        setPostsDisplayedPage(0)\r\n    }, [allPosts])\r\n\r\n    const blogListPageUp = () => {\r\n        // increase current page by 1\r\n        setPostsDisplayedPage(postsDisplayedPage + 1)\r\n    }\r\n\r\n    const blogListPageDown = () => {\r\n        // decrease current page by 1\r\n        setPostsDisplayedPage(postsDisplayedPage - 1)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='hero'>\r\n                <div className='text-wrapper'>\r\n                    <h3>Welcome to</h3>\r\n                    <h1>Instablog</h1>\r\n                    <p></p>\r\n                </div>\r\n            </div>\r\n            <div className='home-search-bar'>\r\n                <DropdownButton id=\"dropdown-basic-button\" title=\"Sort\">\r\n                    <Dropdown.Item as='button' onClick={() => handleSort('recent')}>Most Recent</Dropdown.Item>\r\n                    <Dropdown.Item as='button' onClick={() => handleSort('oldest')}>Oldest</Dropdown.Item>\r\n                    <Dropdown.Item as='button' onClick={() => handleSort('none')}>No Sort</Dropdown.Item>\r\n                </DropdownButton>\r\n            </div>\r\n            <div className='home-blog-posts'>\r\n                {displayPosts.map(post => {\r\n                    return <BlogPostBrief\r\n                        title={post.title}\r\n                        description={post.description}\r\n                        id={post._id}\r\n                        createdAt={post.createdAt}\r\n                        creator={post.creator}\r\n                    />\r\n                })}\r\n                <div className={`loading-display${isLoading ? '' : ' hide'}`}>\r\n                    Loading Posts <i className='fad fa-spinner-third'></i>\r\n                </div>\r\n            </div>\r\n            <div className='home-posts-pages-btns'>\r\n                {postsDisplayedPage !== 0 ?\r\n                    <button className='btn btn-light' onClick={blogListPageDown}>Prev</button> :\r\n                    <button className='btn btn-light' disabled>Prev</button>\r\n                }\r\n                {postsDisplayedPage * 5 + 4 < allPosts.length ?\r\n                    <button className='btn btn-light' onClick={blogListPageUp}>Next</button> :\r\n                    <button className='btn btn-light' disabled>Next</button>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useHistory, useLocation, Link } from 'react-router-dom'\r\nimport API from '../../utils/API'\r\nimport './index.css'\r\n\r\nexport default function Header() {\r\n    const location = useLocation();\r\n    let history = useHistory();\r\n\r\n    const [loggedInUser, setLoggedInUser] = useState(null)\r\n\r\n    const [showPopUp, setShowPopUp] = useState(false)\r\n\r\n    useEffect(() => {\r\n        // on load, validate web token in storage (if exists)\r\n        const token = localStorage.getItem('token')\r\n\r\n        if (token) {\r\n            API.validateToken(token)\r\n                .then(user => {\r\n                    // if user is found, set their info in the state\r\n                    setLoggedInUser(user.data)\r\n                })\r\n                .catch(err => {\r\n                    // if token was invalid, set user state to null\r\n                    setLoggedInUser(null)\r\n                })\r\n        } else {\r\n            setLoggedInUser(false)\r\n        }\r\n\r\n        // hide pop up when page changes\r\n        setShowPopUp(false)\r\n    }, [location])\r\n\r\n    const handlePopUpToggle = () => {\r\n        setShowPopUp(!showPopUp)\r\n    }\r\n\r\n    const handleLogout = () => {\r\n        // remove jwt from local storage and redirect to home page\r\n        localStorage.removeItem('token')\r\n\r\n        // if current page is home page, refresh page\r\n        if (location.pathname === '/') history.go(0)\r\n        else history.push('/')\r\n    }\r\n\r\n    return (\r\n        <header>\r\n            <div className='header-items-left'>\r\n                <Link to='/' className='header-logo'><i className='fad fa-comment-lines'></i> Instablog</Link>\r\n            </div>\r\n            <div className='header-items-right'>\r\n                <i className='fas fa-user' onClick={handlePopUpToggle}></i>\r\n                {loggedInUser ?\r\n                    <div className={`header-user-pop-up${showPopUp ? ' active' : ''}`}>\r\n                        <p className='user-name'>{loggedInUser.name}</p>\r\n                        <Link className='dashboard-link' to={`dashboard/user/${loggedInUser.id}`}>My Dashboard</Link>\r\n                        <button className='logout-btn btn btn-primary' onClick={handleLogout}>Log Out</button>\r\n                    </div> :\r\n                    <div className={`header-user-pop-up${showPopUp ? ' active' : ''}`}>\r\n                        <div className='flex-wrapper'>\r\n                            <Link className='login-btn btn btn-dark' to='/login'>Log in</Link>\r\n                            <Link className='signup-btn btn btn-dark' to='/signup'>Sign Up</Link>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n","import logo from './logo.svg';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport './App.css';\r\nimport PostCreator from './pages/PostCreator'\r\nimport BlogPost from './pages/BlogPost'\r\nimport Login from './pages/Login'\r\nimport Dashboard from './pages/Dashboard'\r\nimport Home from './pages/Home'\r\nimport Header from './components/Header'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className='content-header-shift'>\r\n        <Router basename='/blog-cms'>\r\n          <Header />\r\n          <Switch>\r\n            <Route exact path='/'>\r\n              <div className='bg bg-dark'></div>\r\n              <Home />\r\n            </Route>\r\n            <Route exact path='/login'>\r\n              <Login isMakingNewAccount={false} />\r\n            </Route>\r\n            <Route exact path='/signup'>\r\n              <Login isMakingNewAccount={true} />\r\n            </Route>\r\n            <Route exact path='/dashboard/user/:userId'>\r\n              <div className='bg bg-dark'></div>\r\n              <Dashboard />\r\n            </Route>\r\n            <Route exact path='/user/:userId/post/update/:postId'>\r\n              <PostCreator />\r\n            </Route>\r\n            <Route exact path='/post/:id'>\r\n              <BlogPost />\r\n            </Route>\r\n          </Switch>\r\n        </Router>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(<App /> ,document.getElementById('root'));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}