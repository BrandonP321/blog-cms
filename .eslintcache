[{"D:\\code\\personal-projects\\blog-cms\\src\\index.js":"1","D:\\code\\personal-projects\\blog-cms\\src\\App.js":"2","D:\\code\\personal-projects\\blog-cms\\src\\reportWebVitals.js":"3","D:\\code\\personal-projects\\blog-cms\\src\\pages\\PostCreator\\index.js":"4","D:\\code\\personal-projects\\blog-cms\\src\\components\\BlogPostSection\\index.js":"5","D:\\code\\personal-projects\\blog-cms\\src\\pages\\BlogPost\\index.js":"6","D:\\code\\personal-projects\\blog-cms\\src\\components\\BlogPostImage\\index.js":"7","D:\\code\\personal-projects\\blog-cms\\src\\components\\BlogPostTitle\\index.js":"8","D:\\code\\personal-projects\\blog-cms\\src\\components\\PostCreationComponents\\CreatorToolBox\\index.js":"9","D:\\code\\personal-projects\\blog-cms\\src\\components\\PostCreationComponents\\BlogPostTitle\\index.js":"10","D:\\code\\personal-projects\\blog-cms\\src\\components\\PostCreationComponents\\BlogPostImage\\index.js":"11","D:\\code\\personal-projects\\blog-cms\\src\\components\\PostCreationComponents\\BlogPostSection\\index.js":"12","D:\\code\\personal-projects\\blog-cms\\src\\components\\PostCreationComponents\\SectionOptions\\index.js":"13","D:\\code\\personal-projects\\blog-cms\\src\\utils\\API.js":"14","D:\\code\\personal-projects\\blog-cms\\src\\pages\\Login\\index.js":"15","D:\\code\\personal-projects\\blog-cms\\src\\components\\loginComponents\\LoginForm\\index.js":"16","D:\\code\\personal-projects\\blog-cms\\src\\components\\loginComponents\\SignUpForm\\index.js":"17","D:\\code\\personal-projects\\blog-cms\\src\\pages\\Dashboard\\index.js":"18","D:\\code\\personal-projects\\blog-cms\\src\\components\\dashboardComponents\\ProfileOverview\\index.js":"19","D:\\code\\personal-projects\\blog-cms\\src\\components\\dashboardComponents\\BlogPostBrief\\index.js":"20","D:\\code\\personal-projects\\blog-cms\\src\\pages\\Home\\index.js":"21","D:\\code\\personal-projects\\blog-cms\\src\\components\\BlogPostBrief\\index.js":"22","D:\\code\\personal-projects\\blog-cms\\src\\components\\Header\\index.js":"23"},{"size":449,"mtime":1612245981439,"results":"24","hashOfConfig":"25"},{"size":1324,"mtime":1612251308080,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":499162500000,"results":"27","hashOfConfig":"25"},{"size":8128,"mtime":1611448949365,"results":"28","hashOfConfig":"25"},{"size":252,"mtime":1609903535586,"results":"29","hashOfConfig":"25"},{"size":2059,"mtime":1611448882558,"results":"30","hashOfConfig":"25"},{"size":195,"mtime":1611104672354,"results":"31","hashOfConfig":"25"},{"size":257,"mtime":1609904244862,"results":"32","hashOfConfig":"25"},{"size":888,"mtime":1611447410818,"results":"33","hashOfConfig":"25"},{"size":832,"mtime":1610276934679,"results":"34","hashOfConfig":"25"},{"size":663,"mtime":1611099464963,"results":"35","hashOfConfig":"25"},{"size":899,"mtime":1610098169598,"results":"36","hashOfConfig":"25"},{"size":1552,"mtime":1611100438411,"results":"37","hashOfConfig":"25"},{"size":1359,"mtime":1612249556247,"results":"38","hashOfConfig":"25"},{"size":4196,"mtime":1612249968092,"results":"39","hashOfConfig":"25"},{"size":1389,"mtime":1610242516703,"results":"40","hashOfConfig":"25"},{"size":2394,"mtime":1610239603404,"results":"41","hashOfConfig":"25"},{"size":9265,"mtime":1612242343693,"results":"42","hashOfConfig":"25"},{"size":934,"mtime":1610333387753,"results":"43","hashOfConfig":"25"},{"size":1220,"mtime":1612250053492,"results":"44","hashOfConfig":"25"},{"size":4328,"mtime":1612229649547,"results":"45","hashOfConfig":"25"},{"size":1551,"mtime":1612249897486,"results":"46","hashOfConfig":"25"},{"size":2744,"mtime":1612252589896,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"fpreo9",{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"50"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"50"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\code\\personal-projects\\blog-cms\\src\\index.js",[],["106","107"],"D:\\code\\personal-projects\\blog-cms\\src\\App.js",["108"],"D:\\code\\personal-projects\\blog-cms\\src\\reportWebVitals.js",[],"D:\\code\\personal-projects\\blog-cms\\src\\pages\\PostCreator\\index.js",["109","110","111","112"],"import React, { useState, useRef, useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport API from '../../utils/API'\r\nimport CreatorToolBox from '../../components/PostCreationComponents/CreatorToolBox'\r\nimport BlogPostTitle from '../../components/PostCreationComponents/BlogPostTitle'\r\nimport BlogPostImage from '../../components/PostCreationComponents/BlogPostImage'\r\nimport BlogPostSection from '../../components/PostCreationComponents/BlogPostSection'\r\nimport './index.css'\r\n\r\nexport default function PostCreator(props) {\r\n    const { userId, postId } = useParams();\r\n\r\n    const [isPublishing, setIsPublishing] = useState(false)\r\n\r\n    const [components, setComponentsState] = useState([])\r\n    const componentsRef = useRef([])\r\n    const setComponents = data => {\r\n        componentsRef.current = data\r\n        setComponentsState(data)\r\n    }\r\n\r\n    const [showSitePreview, setShowSitePreview] = useState(false)\r\n\r\n    useEffect(() => {\r\n        // using post id in url, make api call to get data on blog post\r\n        API.getBlogPost(postId).then(post => {\r\n            setComponents(post.data.postSections)\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        // if post is publishing, hide body overflow\r\n        if (isPublishing) {\r\n            document.body.style.overflowY = 'hidden'\r\n        } else {\r\n            document.body.style.overflowY = 'auto'\r\n        }\r\n    }, [isPublishing])\r\n\r\n    const addSection = () => {\r\n        // add object to state with properties for a section with a heading and text\r\n        const sectionObj = {\r\n            sectionType: 'subSection',\r\n            heading: 'Heading',\r\n            text: 'This is the body text for this section'\r\n        }\r\n\r\n        setComponents([...componentsRef.current, sectionObj])\r\n    }\r\n\r\n    const addImage = () => {\r\n        // add object to state with info for image section\r\n        const imgObj = {\r\n            sectionType: 'image',\r\n            url: '',\r\n            alt: '',\r\n        }\r\n\r\n        setComponents([...componentsRef.current, imgObj])\r\n    }\r\n\r\n    const handleSectionMove = (index, direction) => {\r\n        const newSections = [...componentsRef.current]\r\n\r\n        // set integer value to direction to indicate index increase/decrease in state array\r\n        const moveAmount = direction === 'up' ? -1 : 1\r\n        // remove section from array of sections\r\n        const section = newSections.splice(index, 1)[0]\r\n        // add section back in at new index locations\r\n        newSections.splice(index + moveAmount, 0, section)\r\n        // set value in state and ref hooks to new array of sections\r\n        setComponents(newSections)\r\n    }\r\n\r\n    const handleSectionDelete = index => {\r\n        // make copy of current state and remove section\r\n        const newSections = [...componentsRef.current]\r\n        newSections.splice(index, 1)\r\n\r\n        // update hooks with new array\r\n        setComponents(newSections)\r\n    }\r\n\r\n    const handleTextInputChange = (event) => {\r\n        // get value and name of input field and index of section in state\r\n        const name = event.target.getAttribute('data-name')\r\n        const text = event.target.innerText\r\n        const index = event.target.getAttribute('data-index')\r\n\r\n        // create new array to with updated value of input field\r\n        const updatedArr = [...componentsRef.current]\r\n        updatedArr[index][name] = text\r\n\r\n        // only update ref since value doesn't change rendered components\r\n        componentsRef.current = updatedArr\r\n    }\r\n\r\n    const updateSectionImage = (img, index) => {\r\n        // update img of section at given index\r\n        const newSectionsArr = [...componentsRef.current]\r\n        newSectionsArr[index].url = img\r\n\r\n        setComponents(newSectionsArr)\r\n    }\r\n\r\n    const toggleSitePreview = () => {\r\n        // if site preview is currently false, hide creator elements to show preview\r\n        if (!showSitePreview) {\r\n            document.querySelectorAll('.section-options-container').forEach(ele => ele.style.display = 'none')\r\n        } else {\r\n            // else show all creator elements\r\n            document.querySelectorAll('.section-options-container').forEach(ele => ele.style.display = 'block')\r\n        }\r\n\r\n        // update state to show/hide site preview\r\n        setShowSitePreview(!showSitePreview)\r\n    }\r\n\r\n    const publishSite = async () => {\r\n        // update state\r\n        setIsPublishing(true)\r\n\r\n        // for each section that contains an image, upload the image to cloudinary and replace temp url with returned url\r\n        Promise.all(componentsRef.current.map(async (section, index) => {\r\n            if (section.sectionType === 'image') {\r\n                const imgData = {\r\n                    file: section.url,\r\n                    upload_preset: 'oatstti0'\r\n                }\r\n\r\n                const imgUploadRequest = await API.updateCloudinaryImage(imgData)\r\n\r\n                const newUrl = imgUploadRequest.data.url\r\n\r\n                return { ...section, url: newUrl }\r\n            } else {\r\n                return section\r\n            }\r\n        })).then((response) => {\r\n            // update state\r\n            setIsPublishing(false)\r\n\r\n            // returned response is array of sections with new cloudinary image urls, send to server\r\n            API.updateBlogPost(postId, { postSections: response })\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n            alert('An error has occurred')\r\n            setIsPublishing(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={`loading-screen-overlay${isPublishing ? ' active' : ''}`}>\r\n                <i className='fad fa-spinner-third'></i>\r\n                <h2>Publishing...</h2>\r\n            </div>\r\n            <CreatorToolBox\r\n                addSection={addSection}\r\n                addImage={addImage}\r\n                previewSite={toggleSitePreview}\r\n                publish={publishSite}\r\n                showSitePreview={showSitePreview}\r\n            />\r\n            <div className='content-responsive'>\r\n                {components.map((section, index) => {\r\n                    switch (section.sectionType) {\r\n                        case 'title':\r\n                            return <div className='post-section-wrapper'>\r\n                                <BlogPostTitle\r\n                                    title={section.title}\r\n                                    subtitle={section.subtitle}\r\n                                    index={index}\r\n                                    handleTextInputChange={handleTextInputChange}\r\n                                    handleSectionMove={handleSectionMove}\r\n                                    handleSectionDelete={handleSectionDelete}\r\n                                /></div>\r\n                        case 'subSection':\r\n                            return <div className='post-section-wrapper'>\r\n                                <BlogPostSection\r\n                                    heading={section.heading}\r\n                                    text={section.text}\r\n                                    index={index}\r\n                                    handleTextInputChange={handleTextInputChange}\r\n                                    handleSectionMove={handleSectionMove}\r\n                                    handleSectionDelete={handleSectionDelete}\r\n                                /></div>\r\n                        case 'image':\r\n                            return <div className='post-section-wrapper'>\r\n                                <BlogPostImage\r\n                                    url={section.url}\r\n                                    alt={section.alt}\r\n                                    index={index}\r\n                                    handleSectionMove={handleSectionMove}\r\n                                    handleSectionDelete={handleSectionDelete}\r\n                                    updateSectionImage={updateSectionImage}\r\n                                /></div>\r\n                    }\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","D:\\code\\personal-projects\\blog-cms\\src\\components\\BlogPostSection\\index.js",[],"D:\\code\\personal-projects\\blog-cms\\src\\pages\\BlogPost\\index.js",["113","114","115"],"import React, { useEffect, useState } from 'react'\r\nimport BlogPostSection from '../../components/BlogPostSection'\r\nimport BlogPostImage from '../../components/BlogPostImage'\r\nimport BlogPostTitle from '../../components/BlogPostTitle'\r\nimport './index.css'\r\nimport { useParams } from 'react-router-dom'\r\nimport API from '../../utils/API'\r\n\r\nexport default function BlogPost() {\r\n    const { id } = useParams();\r\n\r\n    const [sections, setSections] = useState([])\r\n\r\n    useEffect(() => {\r\n        // get blog post data from server\r\n        API.getBlogPost(id).then(response => {\r\n            setSections(response.data.postSections)\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <div className='content-responsive'>\r\n                {sections.map((section, index) => {\r\n                    switch (section.sectionType) {\r\n                        case 'title':\r\n                            return <div className='post-section-wrapper'>\r\n                                <BlogPostTitle\r\n                                    title={section.title}\r\n                                    subtitle={section.subtitle}\r\n                                    index={index}\r\n                                /></div>\r\n                        case 'subSection':\r\n                            return <div className='post-section-wrapper'>\r\n                                <BlogPostSection\r\n                                    heading={section.heading}\r\n                                    text={section.text}\r\n                                    index={index}\r\n                                /></div>\r\n                        case 'image':\r\n                            return <div className='post-section-wrapper'>\r\n                                <BlogPostImage\r\n                                    url={section.url}\r\n                                    alt={section.alt}\r\n                                    index={index}\r\n                                /></div>\r\n                    }\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","D:\\code\\personal-projects\\blog-cms\\src\\components\\BlogPostImage\\index.js",[],"D:\\code\\personal-projects\\blog-cms\\src\\components\\BlogPostTitle\\index.js",[],"D:\\code\\personal-projects\\blog-cms\\src\\components\\PostCreationComponents\\CreatorToolBox\\index.js",[],"D:\\code\\personal-projects\\blog-cms\\src\\components\\PostCreationComponents\\BlogPostTitle\\index.js",["116"],"import React from 'react'\r\nimport SectionOptions from '../SectionOptions'\r\nimport './index.css'\r\n\r\nexport default function BlogPostTitle(props) {\r\n    return (\r\n        <div className='post-creator-section'>\r\n            <h1 \r\n                className='post-title' \r\n                onBlur={props.handleTextInputChange}\r\n                data-index={props.index}\r\n                data-name='title'\r\n                contentEditable\r\n            >\r\n                {props.title}\r\n            </h1>\r\n            <h3 \r\n                className='post-sub-title' \r\n                onBlur={props.handleTextInputChange}\r\n                data-index={props.index}\r\n                data-name='subtitle'\r\n                contentEditable\r\n            >\r\n                {props.subtitle}\r\n            </h3>           \r\n        </div>\r\n    )\r\n}\r\n","D:\\code\\personal-projects\\blog-cms\\src\\components\\PostCreationComponents\\BlogPostImage\\index.js",[],"D:\\code\\personal-projects\\blog-cms\\src\\components\\PostCreationComponents\\BlogPostSection\\index.js",[],"D:\\code\\personal-projects\\blog-cms\\src\\components\\PostCreationComponents\\SectionOptions\\index.js",[],"D:\\code\\personal-projects\\blog-cms\\src\\utils\\API.js",["117"],"import axios from 'axios'\r\n\r\n// const APIENDPOINT = process.env.REACT_APP_APIENDPOINT\r\nconst APIENDPOINT = 'http://localhost:8000'\r\n\r\nexport default {\r\n    getBlogPost: function(id) {\r\n        return axios.get(`${APIENDPOINT}/api/post/` + id)\r\n    },\r\n    getAllBlogPosts: function() {\r\n        return axios.get(`${APIENDPOINT}/api/post/all`)\r\n    },\r\n    getPostsByUser: function(userId) {\r\n        return axios.get(`${APIENDPOINT}/api/user/` + userId + '/post/all')\r\n    },\r\n    createBlogPost: function(postObj) {\r\n        return axios.post(`${APIENDPOINT}/api/post/create`, postObj)\r\n    },\r\n    updateBlogPost: function(id, postObj) {\r\n        return axios.put(`${APIENDPOINT}/api/post/update/` + id, postObj)\r\n    },\r\n    deleteBlogPost: function(id) {\r\n        return axios.delete(`${APIENDPOINT}/api/post/delete/` + id)\r\n    },\r\n    login: function(userObj) {\r\n        return axios.post(`${APIENDPOINT}/api/user/login`, userObj)\r\n    },\r\n    createNewAccount: function(userObj) {\r\n        return axios.post(`${APIENDPOINT}/api/user/create`, userObj)\r\n    },\r\n    validateToken: function(token) {\r\n        return axios.get(`${APIENDPOINT}/api/auth/token`, { 'headers': { 'auth-token': `${token}`}})\r\n    },\r\n    updateCloudinaryImage: function(img) {\r\n        return axios.post('https://api.cloudinary.com/v1_1/brandonp321/image/upload', img)\r\n    }\r\n}","D:\\code\\personal-projects\\blog-cms\\src\\pages\\Login\\index.js",["118","119"],"import React, { useState, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport LoginForm from '../../components/loginComponents/LoginForm'\r\nimport SignUpForm from '../../components/loginComponents/SignUpForm'\r\nimport API from '../../utils/API'\r\nimport './index.css'\r\n\r\nexport default function Login(props) {\r\n    let history = useHistory();\r\n\r\n    const { isMakingNewAccount } = props\r\n\r\n    // boolean to show login or sign up form\r\n    const [showLoginForm, setShowLoginForm] = useState(!isMakingNewAccount)\r\n\r\n    const [signUpPasswordsMatch, setSignUpPasswordsMatch] = useState(true)\r\n\r\n    const [signUpFormInput, setSignUpFormInput] = useState({\r\n        name: '',\r\n        email: '',\r\n        password: '',\r\n        passwordReEnter: '',\r\n    })\r\n\r\n    const [loginFormInput, setLoginFormInput] = useState({\r\n        email: '',\r\n        password: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        // when sign up form is updated, check if passwords match\r\n        const { password, passwordReEnter } = signUpFormInput;\r\n        setSignUpPasswordsMatch(password === passwordReEnter)\r\n    }, [signUpFormInput])\r\n\r\n    const handleLoginTextInputChange = event => {\r\n        // get name and value of input changed\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n\r\n        // update state with new value\r\n        setLoginFormInput({ ...loginFormInput, [name]: value})\r\n    }\r\n\r\n    const handleSignUpTextinputChange = event => {\r\n        // get name and value of input changed\r\n        const name = event.target.name\r\n        const value = event.target.value\r\n\r\n        // update state with new value\r\n        setSignUpFormInput({ ...signUpFormInput, [name]: value })\r\n    }\r\n\r\n    const toggleForm = () => {\r\n        // toggle boolean in state\r\n        setShowLoginForm(!showLoginForm)\r\n    }\r\n\r\n    const handleLoginAttempt = (event) => {\r\n        event.preventDefault();\r\n\r\n        // send request to server to attempt login\r\n        API.login(loginFormInput)\r\n            .then(response => {\r\n                const token = response.headers['auth-token']\r\n                const userId = response.data\r\n                // store token in local storage\r\n                localStorage.setItem('token', token)\r\n\r\n                // redirect to user's dashboard\r\n                history.push('/dashboard/user/' + userId)\r\n            })\r\n            .catch(err => {\r\n                switch(err.response.status) {\r\n                    case 401:\r\n                        // email or password were incorrect\r\n                        break;\r\n                }\r\n            })\r\n    }\r\n\r\n    const handleSignUpAttempt = (event) => {\r\n        event.preventDefault();\r\n\r\n        const { name, email, password } = signUpFormInput\r\n\r\n        const userObj = {\r\n            name: name,\r\n            email: email,\r\n            password: password\r\n        }\r\n\r\n        // send request to server to create account\r\n        API.createNewAccount(userObj)\r\n            .then(response => {\r\n                // if successfully signed up, store jwt and redirect to dashboard\r\n                const jwt = response.headers['auth-token']\r\n                localStorage.setItem('token', jwt)\r\n\r\n                history.push(`/dashboard/user/${response.data}`)\r\n            })\r\n            .catch(err => {\r\n                switch(err.response.status) {\r\n                    case 409:\r\n                        // user with same email address alreay exists\r\n                        break;\r\n                }\r\n            })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {showLoginForm ? \r\n                <LoginForm \r\n                    toggleForm={toggleForm}\r\n                    handleLoginAttempt={handleLoginAttempt}\r\n                    handleLoginTextInputChange={handleLoginTextInputChange}\r\n                /> :\r\n                <SignUpForm \r\n                    toggleForm={toggleForm}\r\n                    signUpPasswordsMatch={signUpPasswordsMatch}\r\n                    handleSignUpAttempt={handleSignUpAttempt}\r\n                    handleSignUpTextinputChange={handleSignUpTextinputChange}\r\n                />\r\n            }  \r\n        </>\r\n    )\r\n}\r\n","D:\\code\\personal-projects\\blog-cms\\src\\components\\loginComponents\\LoginForm\\index.js",["120"],"import React from 'react'\r\nimport './index.css'\r\n\r\nexport default function LoginForm(props) {\r\n    const { handleLoginAttempt, toggleForm, handleLoginTextInputChange } = props\r\n\r\n    return (\r\n        <div className='login-form-container'>\r\n            <h1>Login</h1>\r\n\r\n            <form onSubmit={handleLoginAttempt}>\r\n                <div class=\"form-group\">\r\n                    <label for=\"login-email-input\">Email address</label>\r\n                    <input type=\"email\" class=\"form-control\" id=\"login-email-input\" name='email' onChange={handleLoginTextInputChange} required />\r\n                    {/* <small id=\"emailHelp\" class=\"form-text text-muted\">We'll never share your email with anyone else.</small> */}\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"login-password-input\">Password</label>\r\n                    <input type=\"password\" class=\"form-control\" id=\"login-password-input\" name='password' onChange={handleLoginTextInputChange} required />\r\n                    {/* <small id=\"emailHelp\" class=\"form-text text-muted\">We'll never share your email with anyone else.</small> */}\r\n                </div>\r\n                <button type=\"submit\" class=\"btn btn-primary\">Login</button>\r\n            </form>\r\n\r\n            <p>Don't have an account? <a href='#' onClick={toggleForm}>Sign Up</a></p>\r\n        </div>\r\n    )\r\n}\r\n","D:\\code\\personal-projects\\blog-cms\\src\\components\\loginComponents\\SignUpForm\\index.js",["121"],"import React from 'react'\r\nimport './index.css'\r\n\r\nexport default function SignUpForm(props) {\r\n    const { toggleForm, \r\n        handleSignUpAttempt, \r\n        handleSignUpTextinputChange,\r\n        signUpPasswordsMatch\r\n    } = props\r\n\r\n    return (\r\n        <div className='signup-form-container'>\r\n            <h1>Sign Up</h1>\r\n\r\n            <form onSubmit={handleSignUpAttempt}>\r\n                <div className=\"form-group\">\r\n                    <label for=\"signup-name-input\">Name</label>\r\n                    <input type=\"text\" className=\"form-control\" id=\"signup-name-input\" name='name' onChange={handleSignUpTextinputChange} required/>\r\n                    {/* <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small> */}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label for=\"signup-email-input\">Email address</label>\r\n                    <input type=\"email\" className=\"form-control\" id=\"signup-email-input\" name='email' onChange={handleSignUpTextinputChange} required/>\r\n                    {/* <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small> */}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label for=\"signup-password-input\">Password</label>\r\n                    <input type=\"password\" className=\"form-control\" id=\"signup-password-input\" name='password' onChange={handleSignUpTextinputChange} required/>\r\n                    {/* <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small> */}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label for=\"signup-password-second-input\">Re-Enter Password</label>\r\n                    <input type=\"password\" className=\"form-control\" id=\"signup-password-second-input\" name='passwordReEnter' onChange={handleSignUpTextinputChange} required/>\r\n                    <small id=\"emailHelp\" className=\"form-text text-muted text-danger\">{signUpPasswordsMatch ? '' : 'Passwords must match'}</small>\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary\">Sign Up</button>\r\n            </form>\r\n\r\n            <p>Already have an account? <a href='#' onClick={toggleForm}>Login</a></p>\r\n        </div>\r\n    )\r\n}\r\n","D:\\code\\personal-projects\\blog-cms\\src\\pages\\Dashboard\\index.js",["122","123"],"import React, { useState, useEffect, useCallback } from 'react'\r\nimport { Button, Modal } from 'react-bootstrap'\r\nimport ProfileOverview from '../../components/dashboardComponents/ProfileOverview'\r\nimport { useParams } from 'react-router-dom'\r\nimport BlogPostBrief from '../../components/dashboardComponents/BlogPostBrief'\r\nimport API from '../../utils/API'\r\nimport './index.css'\r\n\r\nexport default function Dashboard() {\r\n    const { userId } = useParams()\r\n\r\n    const [myPosts, setMyPosts] = useState([])\r\n    const [postsToDisplay, setPostsToDisplay] = useState([])\r\n    const [showModal, setShowModal] = useState(false)\r\n    const [showPostDeleteModal, setShowPostDeleteModal] = useState(false)\r\n    const [postToBeDeleted, setPostToBeDeleted] = useState(null)\r\n    const [modalPostId, setModalPostId] = useState(null)\r\n    const [modalInput, setModalInput] = useState({\r\n        title: '',\r\n        description: ''\r\n    })\r\n    const [userIsMakingNewPost, setUserIsMakingNewPost] = useState(true)\r\n    // current page of list of blog posts starts counting at 0\r\n    const [currentBlogsListPage, setCurrentBlogsListPage] = useState(0)\r\n\r\n    const modalSaveBtnCallback = useCallback(() => {\r\n        if (userIsMakingNewPost) {\r\n            // if user is making a new post, have save btn make an api request to add post to db\r\n            const postObj = {\r\n                title: modalInput.title,\r\n                description: modalInput.description,\r\n                creator: userId,\r\n                postSections: [\r\n                    {\r\n                        sectionType: 'title',\r\n                        title: 'Blog Post Title',\r\n                        subtitle: 'Insert subtitle here'\r\n                    }\r\n                ]\r\n            }\r\n\r\n            // send post object to server\r\n            API.createBlogPost(postObj).then(post => {\r\n                console.log(post.data)\r\n                // open blog editor in new tab\r\n                window.open(`/user/${userId}/post/update/${post.data._id}`)\r\n\r\n                handleModalToggle()\r\n            })\r\n        } else {\r\n\r\n            // else make request to update existing server\r\n            API.updateBlogPost(modalPostId, modalInput).then(() => {\r\n                handleModalToggle()\r\n            })\r\n        }\r\n    }, [userIsMakingNewPost, modalInput, modalPostId])\r\n\r\n    useEffect(() => {\r\n        // make call to server to get all posts by the user\r\n        API.getPostsByUser(userId)\r\n            .then(({ data: posts }) => {\r\n                // add posts to state\r\n                setMyPosts(posts)\r\n            })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        // when my posts are loaded in, select 5 posts based on currently display page to display to user\r\n        if (myPosts.length > 0) {\r\n            const endPostIndex = currentBlogsListPage * 5 + 4 < myPosts.length ? currentBlogsListPage * 5 + 4 : myPosts.length\r\n            console.log(currentBlogsListPage * 5 + 4, myPosts.length)\r\n            const postsArr = myPosts.slice(currentBlogsListPage * 5, endPostIndex + 1)\r\n            console.log('posts on page', postsArr)\r\n            setPostsToDisplay(postsArr)\r\n        }\r\n    }, [myPosts, currentBlogsListPage])\r\n\r\n    const handleModalToggle = () => {\r\n        setShowModal(!showModal)\r\n    }\r\n\r\n    const hideDeletePostModal = () => {\r\n        setShowPostDeleteModal(false)\r\n\r\n        setPostToBeDeleted(null)\r\n    }\r\n\r\n    const showNewPostModal = () => {\r\n        // update values to be shown in modal\r\n        setUserIsMakingNewPost(true)\r\n        setModalInput({ title: '', description: '' })\r\n\r\n        handleModalToggle()\r\n    }\r\n\r\n    const showPostUpdateModal = (title, description, postId) => {\r\n        // update values to be shown in modal\r\n        setUserIsMakingNewPost(false)\r\n        setModalInput({ title: title, description: description })\r\n        setModalPostId(postId)\r\n\r\n        setShowModal(!showModal)\r\n    }\r\n\r\n    const handleModalInputChange = (event) => {\r\n        // get name and value of input changed\r\n        const name = event.target.name\r\n        const value = event.target.value\r\n\r\n        // update state with new value\r\n        setModalInput({ ...modalInput, [name]: value })\r\n    }\r\n\r\n    const handlePostDeleteAttempt = postId => {\r\n        // update state with id of post to be deleted\r\n        setPostToBeDeleted(postId)\r\n\r\n        // pop up modal to confirm user wants to delete blog post\r\n        setShowPostDeleteModal(true)\r\n    }\r\n\r\n    const handlePostDelete = () => {\r\n        console.log(postToBeDeleted)\r\n        API.deleteBlogPost(postToBeDeleted).then(() => {\r\n            hideDeletePostModal()\r\n        })\r\n    }\r\n\r\n    const handlePrevBtnClick = () => {\r\n        // decrease current page by 1\r\n        setCurrentBlogsListPage(currentBlogsListPage - 1)\r\n    }\r\n\r\n    const handleNextBtnClick = () => {\r\n        // increase current page by 1\r\n        setCurrentBlogsListPage(currentBlogsListPage + 1)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='dashboard-wrapper'>\r\n                <h1 className='text-white'>My Dashboard</h1>\r\n                <div className='dashboard-content-wrapper'>\r\n                    <ProfileOverview />\r\n                    <div className='my-posts-container'>\r\n                        <h2 className='text-white'>My Posts</h2>\r\n                        <div className='search-bar'>\r\n                            <div className='flex-items-right'>\r\n                                <button className='new-post-btn btn btn-primary' onClick={showNewPostModal}>Create New Post</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className='posts'>\r\n                            {postsToDisplay.map(post => {\r\n                                return <BlogPostBrief\r\n                                    title={post.title}\r\n                                    description={post.description}\r\n                                    id={post._id}\r\n                                    userId={userId}\r\n                                    showPostUpdateModal={showPostUpdateModal}\r\n                                    handlePostDeleteAttempt={handlePostDeleteAttempt}\r\n                                />\r\n                            })}\r\n                        </div>\r\n                        <div className='my-posts-page-btns'>\r\n                            {currentBlogsListPage !== 0 ?\r\n                                <button className='btn btn-light' onClick={handlePrevBtnClick}>Previous</button> :\r\n                                <button className='btn btn-light' disabled>Previous</button>\r\n                            }\r\n                            {currentBlogsListPage * 5 + 4 < myPosts.length ?\r\n                                <button className='btn btn-light' onClick={handleNextBtnClick}>Next</button> :\r\n                                <button className='btn btn-light' disabled>Next</button>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <Modal show={showModal} onHide={handleModalToggle}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Blog Post Details</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <div className='form-group'>\r\n                        <label for='blog-title-input'>Title</label>\r\n                        <input id='blog-title-input' className='modal-post-title form-control' placeholder='Blog Post Title' name='title' value={modalInput.title} onChange={handleModalInputChange} />\r\n                    </div>\r\n                    <div className='form-group'>\r\n                        <label for='blog-desc-input'>Description</label>\r\n                        <textarea id='blog-desc-input' className='modal-post-description form-control' placeholder='Description' name='description' value={modalInput.description} onChange={handleModalInputChange}>\r\n                        </textarea>\r\n                    </div>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleModalToggle}>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={modalSaveBtnCallback}>\r\n                        {userIsMakingNewPost ? 'Create Post' : 'Save Changes'}\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n            <Modal show={showPostDeleteModal} onHide={hideDeletePostModal}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Blog Post Details</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    Are you sure you want to delete this blog post?\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"danger\" onClick={handlePostDelete}>\r\n                        Delete\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={hideDeletePostModal}>\r\n                        Cancel\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n","D:\\code\\personal-projects\\blog-cms\\src\\components\\dashboardComponents\\ProfileOverview\\index.js",[],"D:\\code\\personal-projects\\blog-cms\\src\\components\\dashboardComponents\\BlogPostBrief\\index.js",["124"],"import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './index.css'\r\n\r\nexport default function BlogPostBrief(props) {\r\n    const [isExpanded, setIsExpanded] = useState(false)\r\n\r\n    return (\r\n        <div className={isExpanded ? 'my-post-brief expanded' : 'my-post-brief'}>\r\n            <div className='my-post-details'>\r\n                <Link className='my-post-title' href={`/post/${props.id}`} target='_blank'><strong>{props.title}</strong></Link>\r\n                <p className='my-post-description'>{props.description}</p>\r\n            </div>\r\n            <div className='my-post-options'>\r\n                <button className='btn btn-primary' onClick={() => props.showPostUpdateModal(props.title, props.description, props.id)}>Details</button>\r\n                <button className='btn btn-primary' onClick={() => window.open('/user/' + props.userId + '/post/update/' + props.id)}>Edit</button>\r\n                <button className='btn btn-danger' onClick={() => props.handlePostDeleteAttempt(props.id)}>Delete</button>\r\n                <a href='#' onClick={() => setIsExpanded(!isExpanded)}>{isExpanded ? 'Read Less' : 'Read More'}</a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","D:\\code\\personal-projects\\blog-cms\\src\\pages\\Home\\index.js",["125","126"],"import React, { useState, useEffect, useCallback } from 'react'\r\nimport { Dropdown, DropdownButton } from 'react-bootstrap'\r\nimport BlogPostBrief from '../../components/BlogPostBrief'\r\nimport API from '../../utils/API'\r\nimport './index.css'\r\n\r\nexport default function Home() {\r\n    const [allPosts, setAllPosts] = useState([])\r\n    const [sortedPosts, setSortedPosts] = useState([])\r\n    const [displayPosts, setDisplayedPosts] = useState([])\r\n    const [postsDisplayedPage, setPostsDisplayedPage] = useState(0)\r\n\r\n    useEffect(() => {\r\n        // on load, get all blog posts from server\r\n        API.getAllBlogPosts()\r\n            .then(({ data: posts }) => {\r\n                // update state with array of posts\r\n                setAllPosts(posts)\r\n                // sorted posts state can also be set now since no sort option is set\r\n                setSortedPosts(posts)\r\n            })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        // when all posts state is updated, update posts to be displayed\r\n        if (sortedPosts.length > 0) {\r\n            const endPostIndex = postsDisplayedPage * 5 + 4 < sortedPosts.length ? postsDisplayedPage * 5 + 4 : sortedPosts.length\r\n            const postsArr = sortedPosts.slice(postsDisplayedPage * 5, endPostIndex + 1)\r\n            setDisplayedPosts(postsArr)\r\n        }\r\n    }, [sortedPosts, postsDisplayedPage])\r\n\r\n    const handleSort = useCallback((sort) => {\r\n        console.log('sorting by ' + sort)\r\n        // based on sort argument, sort the blog posts\r\n        switch (sort) {\r\n            case 'recent':\r\n                var newSortedPosts = [...allPosts].sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))\r\n                setSortedPosts(newSortedPosts)\r\n                break;\r\n            case 'oldest':\r\n                var newSortedPosts = [...allPosts].sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt))\r\n                setSortedPosts(newSortedPosts)\r\n                break;\r\n            case 'none':\r\n                // if no sort, set sorted posts state back to original array of posts\r\n                setSortedPosts([...allPosts])\r\n                break;\r\n        }\r\n\r\n        // set page back to 0\r\n        setPostsDisplayedPage(0)\r\n    }, [allPosts])\r\n\r\n    const blogListPageUp = () => {\r\n        // increase current page by 1\r\n        setPostsDisplayedPage(postsDisplayedPage + 1)\r\n    }\r\n\r\n    const blogListPageDown = () => {\r\n        // decrease current page by 1\r\n        setPostsDisplayedPage(postsDisplayedPage - 1)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='hero'>\r\n                <div className='text-wrapper'>\r\n                    <h3>Welcome to</h3>\r\n                    <h1>Instablog</h1>\r\n                    <p></p>\r\n                </div>\r\n            </div>\r\n            <div className='home-search-bar'>\r\n                <DropdownButton id=\"dropdown-basic-button\" title=\"Sort\">\r\n                    <Dropdown.Item as='button' onClick={() => handleSort('recent')}>Most Recent</Dropdown.Item>\r\n                    <Dropdown.Item as='button' onClick={() => handleSort('oldest')}>Oldest</Dropdown.Item>\r\n                    <Dropdown.Item as='button' onClick={() => handleSort('none')}>No Sort</Dropdown.Item>\r\n                </DropdownButton>\r\n            </div>\r\n            <div className='home-blog-posts'>\r\n                {displayPosts.map(post => {\r\n                    return <BlogPostBrief\r\n                        title={post.title}\r\n                        description={post.description}\r\n                        id={post._id}\r\n                        createdAt={post.createdAt}\r\n                        creator={post.creator}\r\n                    />\r\n                })}\r\n            </div>\r\n            <div className='home-posts-pages-btns'>\r\n                {postsDisplayedPage !== 0 ?\r\n                    <button className='btn btn-light' onClick={blogListPageDown}>Prev</button> :\r\n                    <button className='btn btn-light' disabled>Prev</button>\r\n                }\r\n                {postsDisplayedPage * 5 + 4 < allPosts.length ?\r\n                    <button className='btn btn-light' onClick={blogListPageUp}>Next</button> :\r\n                    <button className='btn btn-light' disabled>Next</button>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","D:\\code\\personal-projects\\blog-cms\\src\\components\\BlogPostBrief\\index.js",["127"],"import React, { useState, useRef } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport './index.css'\r\n\r\nexport default function BlogPostBrief(props) {\r\n    let history = useHistory();\r\n\r\n    const [isExpanded, setIsExpanded] = useState(false)\r\n\r\n    const briefEle = useRef()\r\n    const descEle = useRef()\r\n\r\n    const handleExpandToggle = () => {\r\n        if (isExpanded) {\r\n            // if div is expanded, set height back to 110px and update state\r\n            briefEle.current.style.height = '110px'\r\n        } else {\r\n            // if div not expanded, get height of description ele to find amount of ele hidden\r\n            const descHeight = descEle.current.clientHeight\r\n            const heightDiff = descHeight - 58\r\n\r\n            if (heightDiff > 0) {\r\n                // increase height of brief div by height diff\r\n                briefEle.current.style.height = `${briefEle.current.clientHeight + heightDiff}px`\r\n            }\r\n        }\r\n\r\n        // toggle isExpanded value\r\n        setIsExpanded(!isExpanded)\r\n    }\r\n\r\n    return (\r\n        <div ref={briefEle} className='home-post-brief'>\r\n            <h3 onClick={() => history.push('/post/' + props.id)}>{props.title} <span className='creation-date'></span></h3>\r\n            <p className='creator'>{props.creator} {new Date(props.createdAt).toLocaleDateString()}</p>\r\n            <p ref={descEle} className='description'>{props.description}</p>\r\n            <a href='#' onClick={handleExpandToggle}>{isExpanded ? 'Less' : \"More\"}</a>\r\n        </div>\r\n    )\r\n}\r\n","D:\\code\\personal-projects\\blog-cms\\src\\components\\Header\\index.js",[],{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":1,"column":8,"nodeType":"134","messageId":"135","endLine":1,"endColumn":12},{"ruleId":"132","severity":1,"message":"136","line":11,"column":13,"nodeType":"134","messageId":"135","endLine":11,"endColumn":19},{"ruleId":"137","severity":1,"message":"138","line":29,"column":8,"nodeType":"139","endLine":29,"endColumn":10,"suggestions":"140"},{"ruleId":"141","severity":1,"message":"142","line":167,"column":50,"nodeType":"143","messageId":"144","endLine":167,"endColumn":52},{"ruleId":"145","severity":1,"message":"146","line":168,"column":21,"nodeType":"147","messageId":"148","endLine":199,"endColumn":22},{"ruleId":"137","severity":1,"message":"149","line":19,"column":8,"nodeType":"139","endLine":19,"endColumn":10,"suggestions":"150"},{"ruleId":"141","severity":1,"message":"142","line":24,"column":48,"nodeType":"143","messageId":"144","endLine":24,"endColumn":50},{"ruleId":"145","severity":1,"message":"146","line":25,"column":21,"nodeType":"147","messageId":"148","endLine":47,"endColumn":22},{"ruleId":"132","severity":1,"message":"151","line":2,"column":8,"nodeType":"134","messageId":"135","endLine":2,"endColumn":22},{"ruleId":"152","severity":1,"message":"153","line":6,"column":1,"nodeType":"154","endLine":37,"endColumn":2},{"ruleId":"145","severity":1,"message":"146","line":74,"column":17,"nodeType":"147","messageId":"148","endLine":78,"endColumn":18},{"ruleId":"145","severity":1,"message":"146","line":103,"column":17,"nodeType":"147","messageId":"148","endLine":107,"endColumn":18},{"ruleId":"155","severity":1,"message":"156","line":25,"column":39,"nodeType":"157","endLine":25,"endColumn":72},{"ruleId":"155","severity":1,"message":"156","line":39,"column":41,"nodeType":"157","endLine":39,"endColumn":74},{"ruleId":"137","severity":1,"message":"158","line":57,"column":8,"nodeType":"139","endLine":57,"endColumn":54,"suggestions":"159"},{"ruleId":"137","severity":1,"message":"160","line":66,"column":8,"nodeType":"139","endLine":66,"endColumn":10,"suggestions":"161"},{"ruleId":"155","severity":1,"message":"156","line":18,"column":17,"nodeType":"157","endLine":18,"endColumn":72},{"ruleId":"145","severity":1,"message":"146","line":36,"column":9,"nodeType":"147","messageId":"148","endLine":49,"endColumn":10},{"ruleId":"162","severity":1,"message":"163","line":42,"column":21,"nodeType":"134","messageId":"164","endLine":42,"endColumn":35},{"ruleId":"155","severity":1,"message":"156","line":37,"column":13,"nodeType":"157","endLine":37,"endColumn":54},"no-native-reassign",["165"],"no-negated-in-lhs",["166"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'userId' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'postId'. Either include it or remove the dependency array.","ArrayExpression",["167"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["168"],"'SectionOptions' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useCallback has missing dependencies: 'handleModalToggle' and 'userId'. Either include them or remove the dependency array.",["169"],"React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["170"],"no-redeclare","'newSortedPosts' is already defined.","redeclared","no-global-assign","no-unsafe-negation",{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},"Update the dependencies array to be: [postId]",{"range":"179","text":"180"},"Update the dependencies array to be: [id]",{"range":"181","text":"182"},"Update the dependencies array to be: [userIsMakingNewPost, modalInput, userId, handleModalToggle, modalPostId]",{"range":"183","text":"184"},"Update the dependencies array to be: [userId]",{"range":"185","text":"186"},[1157,1159],"[postId]",[652,654],"[id]",[2302,2348],"[userIsMakingNewPost, modalInput, userId, handleModalToggle, modalPostId]",[2612,2614],"[userId]"]