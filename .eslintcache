[{"D:\\code\\personal-projects\\blog-cms\\src\\index.js":"1","D:\\code\\personal-projects\\blog-cms\\src\\App.js":"2","D:\\code\\personal-projects\\blog-cms\\src\\reportWebVitals.js":"3","D:\\code\\personal-projects\\blog-cms\\src\\pages\\PostCreator\\index.js":"4","D:\\code\\personal-projects\\blog-cms\\src\\components\\BlogPostSection\\index.js":"5","D:\\code\\personal-projects\\blog-cms\\src\\pages\\BlogPost\\index.js":"6","D:\\code\\personal-projects\\blog-cms\\src\\components\\BlogPostImage\\index.js":"7","D:\\code\\personal-projects\\blog-cms\\src\\components\\BlogPostTitle\\index.js":"8","D:\\code\\personal-projects\\blog-cms\\src\\components\\PostCreationComponents\\CreatorToolBox\\index.js":"9","D:\\code\\personal-projects\\blog-cms\\src\\components\\PostCreationComponents\\BlogPostTitle\\index.js":"10","D:\\code\\personal-projects\\blog-cms\\src\\components\\PostCreationComponents\\BlogPostImage\\index.js":"11","D:\\code\\personal-projects\\blog-cms\\src\\components\\PostCreationComponents\\BlogPostSection\\index.js":"12","D:\\code\\personal-projects\\blog-cms\\src\\components\\PostCreationComponents\\SectionOptions\\index.js":"13","D:\\code\\personal-projects\\blog-cms\\src\\utils\\API.js":"14","D:\\code\\personal-projects\\blog-cms\\src\\pages\\Login\\index.js":"15","D:\\code\\personal-projects\\blog-cms\\src\\components\\loginComponents\\LoginForm\\index.js":"16","D:\\code\\personal-projects\\blog-cms\\src\\components\\loginComponents\\SignUpForm\\index.js":"17","D:\\code\\personal-projects\\blog-cms\\src\\pages\\Dashboard\\index.js":"18","D:\\code\\personal-projects\\blog-cms\\src\\components\\dashboardComponents\\ProfileOverview\\index.js":"19","D:\\code\\personal-projects\\blog-cms\\src\\components\\dashboardComponents\\BlogPostBrief\\index.js":"20","D:\\code\\personal-projects\\blog-cms\\src\\pages\\Home\\index.js":"21","D:\\code\\personal-projects\\blog-cms\\src\\components\\BlogPostBrief\\index.js":"22","D:\\code\\personal-projects\\blog-cms\\src\\components\\Header\\index.js":"23"},{"size":500,"mtime":499162500000,"results":"24","hashOfConfig":"25"},{"size":1320,"mtime":1610500090498,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":499162500000,"results":"27","hashOfConfig":"25"},{"size":8128,"mtime":1611448949365,"results":"28","hashOfConfig":"25"},{"size":252,"mtime":1609903535586,"results":"29","hashOfConfig":"25"},{"size":2059,"mtime":1611448882558,"results":"30","hashOfConfig":"25"},{"size":195,"mtime":1611104672354,"results":"31","hashOfConfig":"25"},{"size":257,"mtime":1609904244862,"results":"32","hashOfConfig":"25"},{"size":888,"mtime":1611447410818,"results":"33","hashOfConfig":"25"},{"size":832,"mtime":1610276934679,"results":"34","hashOfConfig":"25"},{"size":663,"mtime":1611099464963,"results":"35","hashOfConfig":"25"},{"size":899,"mtime":1610098169598,"results":"36","hashOfConfig":"25"},{"size":1552,"mtime":1611100438411,"results":"37","hashOfConfig":"25"},{"size":1317,"mtime":1611101502269,"results":"38","hashOfConfig":"25"},{"size":3899,"mtime":1610428259508,"results":"39","hashOfConfig":"25"},{"size":1389,"mtime":1610242516703,"results":"40","hashOfConfig":"25"},{"size":2394,"mtime":1610239603404,"results":"41","hashOfConfig":"25"},{"size":9447,"mtime":1612227803658,"results":"42","hashOfConfig":"25"},{"size":934,"mtime":1610333387753,"results":"43","hashOfConfig":"25"},{"size":1173,"mtime":1610330150045,"results":"44","hashOfConfig":"25"},{"size":4328,"mtime":1612229649547,"results":"45","hashOfConfig":"25"},{"size":1476,"mtime":1612229630722,"results":"46","hashOfConfig":"25"},{"size":2220,"mtime":1610499347029,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"fpreo9",{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"50"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"D:\\code\\personal-projects\\blog-cms\\src\\index.js",[],["104","105"],"D:\\code\\personal-projects\\blog-cms\\src\\App.js",["106"],"import logo from './logo.svg';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport './App.css';\nimport PostCreator from './pages/PostCreator'\nimport BlogPost from './pages/BlogPost'\nimport Login from './pages/Login'\nimport Dashboard from './pages/Dashboard'\nimport Home from './pages/Home'\nimport Header from './components/Header'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className='content-header-shift'>\n        <Router >\n          <Switch>\n            <Route exact path='/'>\n              <div className='bg bg-dark'></div>\n              <Home />\n            </Route>\n            <Route exact path='/login'>\n              <Login isMakingNewAccount={false} />\n            </Route>\n            <Route exact path='/signup'>\n              <Login isMakingNewAccount={true} />\n            </Route>\n            <Route exact path='/dashboard/user/:userId'>\n              <div className='bg bg-dark'></div>\n              <Dashboard />\n            </Route>\n            <Route exact path='/user/:userId/post/update/:postId'>\n              <PostCreator />\n            </Route>\n            <Route exact path='/post/:id'>\n              <BlogPost />\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\code\\personal-projects\\blog-cms\\src\\reportWebVitals.js",[],"D:\\code\\personal-projects\\blog-cms\\src\\pages\\PostCreator\\index.js",["107","108","109","110"],"import React, { useState, useRef, useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport API from '../../utils/API'\r\nimport CreatorToolBox from '../../components/PostCreationComponents/CreatorToolBox'\r\nimport BlogPostTitle from '../../components/PostCreationComponents/BlogPostTitle'\r\nimport BlogPostImage from '../../components/PostCreationComponents/BlogPostImage'\r\nimport BlogPostSection from '../../components/PostCreationComponents/BlogPostSection'\r\nimport './index.css'\r\n\r\nexport default function PostCreator(props) {\r\n    const { userId, postId } = useParams();\r\n\r\n    const [isPublishing, setIsPublishing] = useState(false)\r\n\r\n    const [components, setComponentsState] = useState([])\r\n    const componentsRef = useRef([])\r\n    const setComponents = data => {\r\n        componentsRef.current = data\r\n        setComponentsState(data)\r\n    }\r\n\r\n    const [showSitePreview, setShowSitePreview] = useState(false)\r\n\r\n    useEffect(() => {\r\n        // using post id in url, make api call to get data on blog post\r\n        API.getBlogPost(postId).then(post => {\r\n            setComponents(post.data.postSections)\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        // if post is publishing, hide body overflow\r\n        if (isPublishing) {\r\n            document.body.style.overflowY = 'hidden'\r\n        } else {\r\n            document.body.style.overflowY = 'auto'\r\n        }\r\n    }, [isPublishing])\r\n\r\n    const addSection = () => {\r\n        // add object to state with properties for a section with a heading and text\r\n        const sectionObj = {\r\n            sectionType: 'subSection',\r\n            heading: 'Heading',\r\n            text: 'This is the body text for this section'\r\n        }\r\n\r\n        setComponents([...componentsRef.current, sectionObj])\r\n    }\r\n\r\n    const addImage = () => {\r\n        // add object to state with info for image section\r\n        const imgObj = {\r\n            sectionType: 'image',\r\n            url: '',\r\n            alt: '',\r\n        }\r\n\r\n        setComponents([...componentsRef.current, imgObj])\r\n    }\r\n\r\n    const handleSectionMove = (index, direction) => {\r\n        const newSections = [...componentsRef.current]\r\n\r\n        // set integer value to direction to indicate index increase/decrease in state array\r\n        const moveAmount = direction === 'up' ? -1 : 1\r\n        // remove section from array of sections\r\n        const section = newSections.splice(index, 1)[0]\r\n        // add section back in at new index locations\r\n        newSections.splice(index + moveAmount, 0, section)\r\n        // set value in state and ref hooks to new array of sections\r\n        setComponents(newSections)\r\n    }\r\n\r\n    const handleSectionDelete = index => {\r\n        // make copy of current state and remove section\r\n        const newSections = [...componentsRef.current]\r\n        newSections.splice(index, 1)\r\n\r\n        // update hooks with new array\r\n        setComponents(newSections)\r\n    }\r\n\r\n    const handleTextInputChange = (event) => {\r\n        // get value and name of input field and index of section in state\r\n        const name = event.target.getAttribute('data-name')\r\n        const text = event.target.innerText\r\n        const index = event.target.getAttribute('data-index')\r\n\r\n        // create new array to with updated value of input field\r\n        const updatedArr = [...componentsRef.current]\r\n        updatedArr[index][name] = text\r\n\r\n        // only update ref since value doesn't change rendered components\r\n        componentsRef.current = updatedArr\r\n    }\r\n\r\n    const updateSectionImage = (img, index) => {\r\n        // update img of section at given index\r\n        const newSectionsArr = [...componentsRef.current]\r\n        newSectionsArr[index].url = img\r\n\r\n        setComponents(newSectionsArr)\r\n    }\r\n\r\n    const toggleSitePreview = () => {\r\n        // if site preview is currently false, hide creator elements to show preview\r\n        if (!showSitePreview) {\r\n            document.querySelectorAll('.section-options-container').forEach(ele => ele.style.display = 'none')\r\n        } else {\r\n            // else show all creator elements\r\n            document.querySelectorAll('.section-options-container').forEach(ele => ele.style.display = 'block')\r\n        }\r\n\r\n        // update state to show/hide site preview\r\n        setShowSitePreview(!showSitePreview)\r\n    }\r\n\r\n    const publishSite = async () => {\r\n        // update state\r\n        setIsPublishing(true)\r\n\r\n        // for each section that contains an image, upload the image to cloudinary and replace temp url with returned url\r\n        Promise.all(componentsRef.current.map(async (section, index) => {\r\n            if (section.sectionType === 'image') {\r\n                const imgData = {\r\n                    file: section.url,\r\n                    upload_preset: 'oatstti0'\r\n                }\r\n\r\n                const imgUploadRequest = await API.updateCloudinaryImage(imgData)\r\n\r\n                const newUrl = imgUploadRequest.data.url\r\n\r\n                return { ...section, url: newUrl }\r\n            } else {\r\n                return section\r\n            }\r\n        })).then((response) => {\r\n            // update state\r\n            setIsPublishing(false)\r\n\r\n            // returned response is array of sections with new cloudinary image urls, send to server\r\n            API.updateBlogPost(postId, { postSections: response })\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n            alert('An error has occurred')\r\n            setIsPublishing(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={`loading-screen-overlay${isPublishing ? ' active' : ''}`}>\r\n                <i className='fad fa-spinner-third'></i>\r\n                <h2>Publishing...</h2>\r\n            </div>\r\n            <CreatorToolBox\r\n                addSection={addSection}\r\n                addImage={addImage}\r\n                previewSite={toggleSitePreview}\r\n                publish={publishSite}\r\n                showSitePreview={showSitePreview}\r\n            />\r\n            <div className='content-responsive'>\r\n                {components.map((section, index) => {\r\n                    switch (section.sectionType) {\r\n                        case 'title':\r\n                            return <div className='post-section-wrapper'>\r\n                                <BlogPostTitle\r\n                                    title={section.title}\r\n                                    subtitle={section.subtitle}\r\n                                    index={index}\r\n                                    handleTextInputChange={handleTextInputChange}\r\n                                    handleSectionMove={handleSectionMove}\r\n                                    handleSectionDelete={handleSectionDelete}\r\n                                /></div>\r\n                        case 'subSection':\r\n                            return <div className='post-section-wrapper'>\r\n                                <BlogPostSection\r\n                                    heading={section.heading}\r\n                                    text={section.text}\r\n                                    index={index}\r\n                                    handleTextInputChange={handleTextInputChange}\r\n                                    handleSectionMove={handleSectionMove}\r\n                                    handleSectionDelete={handleSectionDelete}\r\n                                /></div>\r\n                        case 'image':\r\n                            return <div className='post-section-wrapper'>\r\n                                <BlogPostImage\r\n                                    url={section.url}\r\n                                    alt={section.alt}\r\n                                    index={index}\r\n                                    handleSectionMove={handleSectionMove}\r\n                                    handleSectionDelete={handleSectionDelete}\r\n                                    updateSectionImage={updateSectionImage}\r\n                                /></div>\r\n                    }\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","D:\\code\\personal-projects\\blog-cms\\src\\components\\BlogPostSection\\index.js",[],"D:\\code\\personal-projects\\blog-cms\\src\\pages\\BlogPost\\index.js",["111","112","113"],"import React, { useEffect, useState } from 'react'\r\nimport BlogPostSection from '../../components/BlogPostSection'\r\nimport BlogPostImage from '../../components/BlogPostImage'\r\nimport BlogPostTitle from '../../components/BlogPostTitle'\r\nimport './index.css'\r\nimport { useParams } from 'react-router-dom'\r\nimport API from '../../utils/API'\r\n\r\nexport default function BlogPost() {\r\n    const { id } = useParams();\r\n\r\n    const [sections, setSections] = useState([])\r\n\r\n    useEffect(() => {\r\n        // get blog post data from server\r\n        API.getBlogPost(id).then(response => {\r\n            setSections(response.data.postSections)\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <div className='content-responsive'>\r\n                {sections.map((section, index) => {\r\n                    switch (section.sectionType) {\r\n                        case 'title':\r\n                            return <div className='post-section-wrapper'>\r\n                                <BlogPostTitle\r\n                                    title={section.title}\r\n                                    subtitle={section.subtitle}\r\n                                    index={index}\r\n                                /></div>\r\n                        case 'subSection':\r\n                            return <div className='post-section-wrapper'>\r\n                                <BlogPostSection\r\n                                    heading={section.heading}\r\n                                    text={section.text}\r\n                                    index={index}\r\n                                /></div>\r\n                        case 'image':\r\n                            return <div className='post-section-wrapper'>\r\n                                <BlogPostImage\r\n                                    url={section.url}\r\n                                    alt={section.alt}\r\n                                    index={index}\r\n                                /></div>\r\n                    }\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","D:\\code\\personal-projects\\blog-cms\\src\\components\\BlogPostImage\\index.js",[],"D:\\code\\personal-projects\\blog-cms\\src\\components\\BlogPostTitle\\index.js",[],"D:\\code\\personal-projects\\blog-cms\\src\\components\\PostCreationComponents\\CreatorToolBox\\index.js",[],"D:\\code\\personal-projects\\blog-cms\\src\\components\\PostCreationComponents\\BlogPostTitle\\index.js",["114"],"import React from 'react'\r\nimport SectionOptions from '../SectionOptions'\r\nimport './index.css'\r\n\r\nexport default function BlogPostTitle(props) {\r\n    return (\r\n        <div className='post-creator-section'>\r\n            <h1 \r\n                className='post-title' \r\n                onBlur={props.handleTextInputChange}\r\n                data-index={props.index}\r\n                data-name='title'\r\n                contentEditable\r\n            >\r\n                {props.title}\r\n            </h1>\r\n            <h3 \r\n                className='post-sub-title' \r\n                onBlur={props.handleTextInputChange}\r\n                data-index={props.index}\r\n                data-name='subtitle'\r\n                contentEditable\r\n            >\r\n                {props.subtitle}\r\n            </h3>           \r\n        </div>\r\n    )\r\n}\r\n","D:\\code\\personal-projects\\blog-cms\\src\\components\\PostCreationComponents\\BlogPostImage\\index.js",[],"D:\\code\\personal-projects\\blog-cms\\src\\components\\PostCreationComponents\\BlogPostSection\\index.js",[],"D:\\code\\personal-projects\\blog-cms\\src\\components\\PostCreationComponents\\SectionOptions\\index.js",[],"D:\\code\\personal-projects\\blog-cms\\src\\utils\\API.js",["115"],"import axios from 'axios'\r\n\r\nexport default {\r\n    getBlogPost: function(id) {\r\n        return axios.get('http://localhost:8000/api/post/' + id)\r\n    },\r\n    getAllBlogPosts: function() {\r\n        return axios.get('http://localhost:8000/api/post/all')\r\n    },\r\n    getPostsByUser: function(userId) {\r\n        return axios.get('http://localhost:8000/api/user/' + userId + '/post/all')\r\n    },\r\n    createBlogPost: function(postObj) {\r\n        return axios.post('http://localhost:8000/api/post/create', postObj)\r\n    },\r\n    updateBlogPost: function(id, postObj) {\r\n        return axios.put('http://localhost:8000/api/post/update/' + id, postObj)\r\n    },\r\n    deleteBlogPost: function(id) {\r\n        return axios.delete('http://localhost:8000/api/post/delete/' + id)\r\n    },\r\n    login: function(userObj) {\r\n        return axios.post('http://localhost:8000/api/user/login', userObj)\r\n    },\r\n    createNewAccount: function(userObj) {\r\n        return axios.post('http://localhost:8000/api/user/create', userObj)\r\n    },\r\n    validateToken: function(token) {\r\n        return axios.get('http://localhost:8000/api/auth/token', { 'headers': { 'auth-token': `${token}`}})\r\n    },\r\n    updateCloudinaryImage: function(img) {\r\n        return axios.post('https://api.cloudinary.com/v1_1/brandonp321/image/upload', img)\r\n    }\r\n}","D:\\code\\personal-projects\\blog-cms\\src\\pages\\Login\\index.js",["116","117"],"import React, { useState, useEffect } from 'react'\r\nimport LoginForm from '../../components/loginComponents/LoginForm'\r\nimport SignUpForm from '../../components/loginComponents/SignUpForm'\r\nimport API from '../../utils/API'\r\nimport './index.css'\r\n\r\nexport default function Login(props) {\r\n    const { isMakingNewAccount } = props\r\n\r\n    // boolean to show login or sign up form\r\n    const [showLoginForm, setShowLoginForm] = useState(!isMakingNewAccount)\r\n\r\n    const [signUpPasswordsMatch, setSignUpPasswordsMatch] = useState(true)\r\n\r\n    const [signUpFormInput, setSignUpFormInput] = useState({\r\n        name: '',\r\n        email: '',\r\n        password: '',\r\n        passwordReEnter: '',\r\n    })\r\n\r\n    const [loginFormInput, setLoginFormInput] = useState({\r\n        email: '',\r\n        password: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        // when sign up form is updated, check if passwords match\r\n        const { password, passwordReEnter } = signUpFormInput;\r\n        setSignUpPasswordsMatch(password === passwordReEnter)\r\n    }, [signUpFormInput])\r\n\r\n    const handleLoginTextInputChange = event => {\r\n        // get name and value of input changed\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n\r\n        // update state with new value\r\n        setLoginFormInput({ ...loginFormInput, [name]: value})\r\n    }\r\n\r\n    const handleSignUpTextinputChange = event => {\r\n        // get name and value of input changed\r\n        const name = event.target.name\r\n        const value = event.target.value\r\n\r\n        // update state with new value\r\n        setSignUpFormInput({ ...signUpFormInput, [name]: value })\r\n    }\r\n\r\n    const toggleForm = () => {\r\n        // toggle boolean in state\r\n        setShowLoginForm(!showLoginForm)\r\n    }\r\n\r\n    const handleLoginAttempt = (event) => {\r\n        event.preventDefault();\r\n\r\n        // send request to server to attempt login\r\n        API.login(loginFormInput)\r\n            .then(response => {\r\n                const token = response.headers['auth-token']\r\n                const userId = response.data\r\n                // store token in local storage\r\n                localStorage.setItem('token', token)\r\n\r\n                // redirect to user's dashboard\r\n                window.location.href = '/dashboard/user/' + userId\r\n            })\r\n            .catch(err => {\r\n                switch(err.response.status) {\r\n                    case 401:\r\n                        // email or password were incorrect\r\n                        break;\r\n                }\r\n            })\r\n    }\r\n\r\n    const handleSignUpAttempt = (event) => {\r\n        event.preventDefault();\r\n\r\n        const { name, email, password } = signUpFormInput\r\n\r\n        const userObj = {\r\n            name: name,\r\n            email: email,\r\n            password: password\r\n        }\r\n\r\n        // send request to server to create account\r\n        API.createNewAccount(userObj)\r\n            .then(response => {\r\n                console.log(response)\r\n            })\r\n            .catch(err => {\r\n                switch(err.response.status) {\r\n                    case 409:\r\n                        // user with same email address alreay exists\r\n                        break;\r\n                }\r\n            })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {showLoginForm ? \r\n                <LoginForm \r\n                    toggleForm={toggleForm}\r\n                    handleLoginAttempt={handleLoginAttempt}\r\n                    handleLoginTextInputChange={handleLoginTextInputChange}\r\n                /> :\r\n                <SignUpForm \r\n                    toggleForm={toggleForm}\r\n                    signUpPasswordsMatch={signUpPasswordsMatch}\r\n                    handleSignUpAttempt={handleSignUpAttempt}\r\n                    handleSignUpTextinputChange={handleSignUpTextinputChange}\r\n                />\r\n            }  \r\n        </>\r\n    )\r\n}\r\n","D:\\code\\personal-projects\\blog-cms\\src\\components\\loginComponents\\LoginForm\\index.js",["118"],"import React from 'react'\r\nimport './index.css'\r\n\r\nexport default function LoginForm(props) {\r\n    const { handleLoginAttempt, toggleForm, handleLoginTextInputChange } = props\r\n\r\n    return (\r\n        <div className='login-form-container'>\r\n            <h1>Login</h1>\r\n\r\n            <form onSubmit={handleLoginAttempt}>\r\n                <div class=\"form-group\">\r\n                    <label for=\"login-email-input\">Email address</label>\r\n                    <input type=\"email\" class=\"form-control\" id=\"login-email-input\" name='email' onChange={handleLoginTextInputChange} required />\r\n                    {/* <small id=\"emailHelp\" class=\"form-text text-muted\">We'll never share your email with anyone else.</small> */}\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"login-password-input\">Password</label>\r\n                    <input type=\"password\" class=\"form-control\" id=\"login-password-input\" name='password' onChange={handleLoginTextInputChange} required />\r\n                    {/* <small id=\"emailHelp\" class=\"form-text text-muted\">We'll never share your email with anyone else.</small> */}\r\n                </div>\r\n                <button type=\"submit\" class=\"btn btn-primary\">Login</button>\r\n            </form>\r\n\r\n            <p>Don't have an account? <a href='#' onClick={toggleForm}>Sign Up</a></p>\r\n        </div>\r\n    )\r\n}\r\n","D:\\code\\personal-projects\\blog-cms\\src\\components\\loginComponents\\SignUpForm\\index.js",["119"],"import React from 'react'\r\nimport './index.css'\r\n\r\nexport default function SignUpForm(props) {\r\n    const { toggleForm, \r\n        handleSignUpAttempt, \r\n        handleSignUpTextinputChange,\r\n        signUpPasswordsMatch\r\n    } = props\r\n\r\n    return (\r\n        <div className='signup-form-container'>\r\n            <h1>Sign Up</h1>\r\n\r\n            <form onSubmit={handleSignUpAttempt}>\r\n                <div className=\"form-group\">\r\n                    <label for=\"signup-name-input\">Name</label>\r\n                    <input type=\"text\" className=\"form-control\" id=\"signup-name-input\" name='name' onChange={handleSignUpTextinputChange} required/>\r\n                    {/* <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small> */}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label for=\"signup-email-input\">Email address</label>\r\n                    <input type=\"email\" className=\"form-control\" id=\"signup-email-input\" name='email' onChange={handleSignUpTextinputChange} required/>\r\n                    {/* <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small> */}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label for=\"signup-password-input\">Password</label>\r\n                    <input type=\"password\" className=\"form-control\" id=\"signup-password-input\" name='password' onChange={handleSignUpTextinputChange} required/>\r\n                    {/* <small id=\"emailHelp\" className=\"form-text text-muted\">We'll never share your email with anyone else.</small> */}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label for=\"signup-password-second-input\">Re-Enter Password</label>\r\n                    <input type=\"password\" className=\"form-control\" id=\"signup-password-second-input\" name='passwordReEnter' onChange={handleSignUpTextinputChange} required/>\r\n                    <small id=\"emailHelp\" className=\"form-text text-muted text-danger\">{signUpPasswordsMatch ? '' : 'Passwords must match'}</small>\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary\">Sign Up</button>\r\n            </form>\r\n\r\n            <p>Already have an account? <a href='#' onClick={toggleForm}>Login</a></p>\r\n        </div>\r\n    )\r\n}\r\n","D:\\code\\personal-projects\\blog-cms\\src\\pages\\Dashboard\\index.js",["120","121"],"D:\\code\\personal-projects\\blog-cms\\src\\components\\dashboardComponents\\ProfileOverview\\index.js",[],"D:\\code\\personal-projects\\blog-cms\\src\\components\\dashboardComponents\\BlogPostBrief\\index.js",["122","123"],"import React, { useState } from 'react'\r\nimport './index.css'\r\n\r\nexport default function BlogPostBrief(props) {\r\n    const [isExpanded, setIsExpanded] = useState(false)\r\n\r\n    return (\r\n        <div className={isExpanded ? 'my-post-brief expanded' : 'my-post-brief'}>\r\n            <div className='my-post-details'>\r\n                <a className='my-post-title' href={`/post/${props.id}`} target='_blank'><strong>{props.title}</strong></a>\r\n                <p className='my-post-description'>{props.description}</p>\r\n            </div>\r\n            <div className='my-post-options'>\r\n                <button className='btn btn-primary' onClick={() => props.showPostUpdateModal(props.title, props.description, props.id)}>Details</button>\r\n                <button className='btn btn-primary' onClick={() => window.open('/user/' + props.userId + '/post/update/' + props.id)}>Edit</button>\r\n                <button className='btn btn-danger' onClick={() => props.handlePostDeleteAttempt(props.id)}>Delete</button>\r\n                <a href='#' onClick={() => setIsExpanded(!isExpanded)}>{isExpanded ? 'Read Less' : 'Read More'}</a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","D:\\code\\personal-projects\\blog-cms\\src\\pages\\Home\\index.js",["124","125"],"D:\\code\\personal-projects\\blog-cms\\src\\components\\BlogPostBrief\\index.js",["126"],"D:\\code\\personal-projects\\blog-cms\\src\\components\\Header\\index.js",[],{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","severity":1,"message":"132","line":1,"column":8,"nodeType":"133","messageId":"134","endLine":1,"endColumn":12},{"ruleId":"131","severity":1,"message":"135","line":11,"column":13,"nodeType":"133","messageId":"134","endLine":11,"endColumn":19},{"ruleId":"136","severity":1,"message":"137","line":29,"column":8,"nodeType":"138","endLine":29,"endColumn":10,"suggestions":"139"},{"ruleId":"140","severity":1,"message":"141","line":167,"column":50,"nodeType":"142","messageId":"143","endLine":167,"endColumn":52},{"ruleId":"144","severity":1,"message":"145","line":168,"column":21,"nodeType":"146","messageId":"147","endLine":199,"endColumn":22},{"ruleId":"136","severity":1,"message":"148","line":19,"column":8,"nodeType":"138","endLine":19,"endColumn":10,"suggestions":"149"},{"ruleId":"140","severity":1,"message":"141","line":24,"column":48,"nodeType":"142","messageId":"143","endLine":24,"endColumn":50},{"ruleId":"144","severity":1,"message":"145","line":25,"column":21,"nodeType":"146","messageId":"147","endLine":47,"endColumn":22},{"ruleId":"131","severity":1,"message":"150","line":2,"column":8,"nodeType":"133","messageId":"134","endLine":2,"endColumn":22},{"ruleId":"151","severity":1,"message":"152","line":3,"column":1,"nodeType":"153","endLine":34,"endColumn":2},{"ruleId":"144","severity":1,"message":"145","line":71,"column":17,"nodeType":"146","messageId":"147","endLine":75,"endColumn":18},{"ruleId":"144","severity":1,"message":"145","line":96,"column":17,"nodeType":"146","messageId":"147","endLine":100,"endColumn":18},{"ruleId":"154","severity":1,"message":"155","line":25,"column":39,"nodeType":"156","endLine":25,"endColumn":72},{"ruleId":"154","severity":1,"message":"155","line":39,"column":41,"nodeType":"156","endLine":39,"endColumn":74},{"ruleId":"136","severity":1,"message":"157","line":57,"column":8,"nodeType":"138","endLine":57,"endColumn":54,"suggestions":"158"},{"ruleId":"136","severity":1,"message":"159","line":66,"column":8,"nodeType":"138","endLine":66,"endColumn":10,"suggestions":"160"},{"ruleId":"161","severity":1,"message":"162","line":10,"column":17,"nodeType":"156","endLine":10,"endColumn":89},{"ruleId":"154","severity":1,"message":"155","line":17,"column":17,"nodeType":"156","endLine":17,"endColumn":72},{"ruleId":"144","severity":1,"message":"145","line":36,"column":9,"nodeType":"146","messageId":"147","endLine":49,"endColumn":10},{"ruleId":"163","severity":1,"message":"164","line":42,"column":21,"nodeType":"133","messageId":"165","endLine":42,"endColumn":35},{"ruleId":"154","severity":1,"message":"155","line":34,"column":13,"nodeType":"156","endLine":34,"endColumn":54},"no-native-reassign",["166"],"no-negated-in-lhs",["167"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'userId' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'postId'. Either include it or remove the dependency array.","ArrayExpression",["168"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["169"],"'SectionOptions' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useCallback has missing dependencies: 'handleModalToggle' and 'userId'. Either include them or remove the dependency array.",["170"],"React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["171"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","no-redeclare","'newSortedPosts' is already defined.","redeclared","no-global-assign","no-unsafe-negation",{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},"Update the dependencies array to be: [postId]",{"range":"180","text":"181"},"Update the dependencies array to be: [id]",{"range":"182","text":"183"},"Update the dependencies array to be: [userIsMakingNewPost, modalInput, userId, handleModalToggle, modalPostId]",{"range":"184","text":"185"},"Update the dependencies array to be: [userId]",{"range":"186","text":"187"},[1157,1159],"[postId]",[652,654],"[id]",[2302,2348],"[userIsMakingNewPost, modalInput, userId, handleModalToggle, modalPostId]",[2612,2614],"[userId]"]